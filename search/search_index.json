{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Awesome Programming Course with C++ and Games","text":"<p>How to use this repo: Read the topics, and if you are unsure if you understand the topics covered here it is a good  time for you to revisit them.  - If you just want to read use the pre-rendered documentation here the examples will work better there. - If you want to go deep and propose changes to repo, use the github repo.</p>"},{"location":"#topics","title":"Topics","text":"<ol> <li>Intro to Programming</li> <li>Developer Portfolio</li> <li>Artificial Intelligence</li> </ol>"},{"location":"#philosophy","title":"Philosophy","text":"<p>Before we start, this repository aims to be practical, and it will be updated as we test the methodology. Frame it as a guidebook, not a manual. Most of the time, we are constrained by the time, so in order to move fast, we won't cover deeply some topics, but the basics that allows you to explore by yourself or point the directions for you to study in other places acting as a self-taught student, so you really should look for more information elsewhere if you feels so. I use lots of references and highly incentive you to look for other too and propose changes in this repo. Sometimes, it will mostly presented in a chaotic way, which implies that you will need to explore the concepts by yourself or read the manual/books. Every student should follow your own path to learning, it is impossible to cover every learning style, so it is up to you to build your own path and discover the best way to learn. What worked for me or what works for a given student probably won't work for you, so dont compare yourself to others too much, but be assured that we are here to help you to succeed. If you need help, just send private messages, or use public forums such as github issues and discussions.</p>"},{"location":"#badges","title":"Badges","text":"<p>CI:  </p> <p>Join us:  </p> <p>Quality: </p> <p>Metrics:  </p>"},{"location":"algorithms/","title":"Algorithms","text":""},{"location":"artificialintelligence/","title":"Artificial Intelligence","text":"Week Date Topic 1 2023/01/16 2 2023/01/23 3 2023/01/30 4 2023/02/06 5 2023/02/13 6 2023/02/20 7 2023/02/27 8 2023/03/06 9 2023/03/13 BREAK 10 2023/03/20 11 2023/03/27 12 2023/04/03 13 2023/04/10 14 2023/04/17 15 2023/04/24 16 2023/05/01 FINALS"},{"location":"cpm_modules/format.cmake/17e103764947115e78d95ecc29c4bee54dc64e08/","title":"Index","text":""},{"location":"cpm_modules/format.cmake/17e103764947115e78d95ecc29c4bee54dc64e08/#formatcmake","title":"Format.cmake","text":"<p>clang-format and cmake-format for CMake</p>"},{"location":"cpm_modules/format.cmake/17e103764947115e78d95ecc29c4bee54dc64e08/#about","title":"About","text":"<p>Format.cmake adds three additional targets to your CMake project.</p> <ul> <li><code>format</code> Shows which files are affected by clang-format</li> <li><code>check-format</code> Errors if files are affected by clang-format (for CI integration)</li> <li><code>fix-format</code> Applies clang-format to all affected files</li> </ul> <p>To run the targets, invoke CMake with <code>cmake --build &lt;build directory&gt; --target &lt;target name&gt;</code>.</p> <p>To disable using cmake_format to format CMake files, set the cmake option <code>FORMAT_SKIP_CMAKE</code> to a truthy value, e.g. by invoking CMake with <code>-DFORMAT_SKIP_CMAKE=YES</code>, or enabling the option when adding the dependency (recommended).</p>"},{"location":"cpm_modules/format.cmake/17e103764947115e78d95ecc29c4bee54dc64e08/#demo","title":"Demo","text":""},{"location":"cpm_modules/format.cmake/17e103764947115e78d95ecc29c4bee54dc64e08/#how-to-integrate","title":"How to integrate","text":""},{"location":"cpm_modules/format.cmake/17e103764947115e78d95ecc29c4bee54dc64e08/#using-cpmcmake-recommended","title":"Using CPM.cmake (recommended)","text":"<p>Run the following from the project's root directory to add CPM to your project.</p> <pre><code>mkdir -p cmake\nwget -O cmake/CPM.cmake https://raw.githubusercontent.com/TheLartians/CPM/master/cmake/CPM.cmake\n</code></pre> <p>Add the following lines to the project's <code>CMakeLists.txt</code> after calling <code>project(...)</code>.</p> <pre><code>include(cmake/CPM.cmake)\nCPMAddPackage(\nNAME Format.cmake\nVERSION 1.7.0\nGITHUB_REPOSITORY TheLartians/Format.cmake\nOPTIONS # set to yes skip cmake formatting\n\"FORMAT_SKIP_CMAKE NO\"\n# path to exclude (optional, supports regular expressions)\n\"CMAKE_FORMAT_EXCLUDE cmake/CPM.cmake\"\n)\n</code></pre>"},{"location":"cpm_modules/format.cmake/17e103764947115e78d95ecc29c4bee54dc64e08/#using-git-submodules-not-suited-for-libraries","title":"Using git submodules (not suited for libraries)","text":"<p>Run the following from the project's root directory.</p> <pre><code>git submodule add https://github.com/TheLartians/Format.cmake\n</code></pre> <p>In add the following lines to the project's <code>CMakeLists.txt</code> after calling <code>project(...)</code>.</p> <pre><code>add_subdirectory(Format.cmake)\n</code></pre>"},{"location":"cpm_modules/format.cmake/17e103764947115e78d95ecc29c4bee54dc64e08/#dependencies","title":"Dependencies","text":"<p>Format.cmake requires CMake, clang-format, python 2.7 or python 3, and cmake-format (optional).</p>"},{"location":"cpm_modules/m.css/e895ba4b660ee764c6511109cdda941c90ea7c32/documentation/test_doxygen/page_empty_page/input/","title":"Input","text":"<p>@ingroup bla</p> <p>@class Foo::Bar</p> <p>This is the detailed description for class `Foo::Bar``. We put it in a separate file to not clutter the header file too much. Because this is a really loooong description!</p>"},{"location":"datastructures/","title":"Data Structures","text":"<p>WiP</p>"},{"location":"intro/","title":"Intro to Programming","text":""},{"location":"intro/#schedule","title":"Schedule","text":"Week Date Topic 1 2023/01/16 Introduction 2 2023/01/23 Tooling 3 2023/01/30 Data Types, Arithmetic Operations, Type conversion 4 2023/02/06 Conditionals, Boolean and Bitwise Operations 5 2023/02/13 Loops, for, while, goto 6 2023/02/20 Functions, Base Conversion, Pointers, Reference 7 2023/02/27 Streams, File IO 8 2023/03/06 Midterm 9 2023/03/13 BREAK 10 2023/03/20 Arrays, Vectors, String 11 2023/03/27 Recursion 12 2023/04/03 Sorting 13 2023/04/10 14 2023/04/17 15 2023/04/24 Review 16 2023/05/01 FINALS"},{"location":"intro/01-introduction/","title":"Reasons why you should learn how to program with C++","text":"<p>Before we start, this repository aims to be practical, and I highly incentive you to look for other references. I want to add this another awesome repository it holds an awesome compilation of modern C++ concepts.</p> <p>Another relevant reference for what we are going to cover is the updated core guidelines that explain why some syntax or style is bad and what you should be doing instead.</p>"},{"location":"intro/01-introduction/#why","title":"Why?","text":"<p>The first thing when you think of becoming a programmer is HOW DO I START? Well, C++ is one of the best  programming languages to give you insights into how a computer works. Through the process of learning how to code  C++, you will learn not only how to use this language as a tool to solve your problems, but the farther you go, the  more you will start uncovering and exploring exciting computer concepts.</p> <p>C++ gives you the simplicity of C and adds a lot of steroids. It delivers lots of quality-of-life stuff, increasing  the developer experience. Let\u2019s compare C with C++, shall we?</p> <ol> <li>The iconic book \"The C Programming Language\" by Brian W. Kernighan and Dennis M. Ritchie has only 263 pages.     Pretty simple, huh?</li> <li>The book \"C++ How to Program\" by Harvey and Paul Deitel It holds around 1000 pages, and the pages are way     bigger than the other one.</li> </ol> <p></p> <p>So, don\u2019t worry, you just need to learn the basics first, and all the rest are somehow advanced concepts. I will do  my best to keep you focused on what is relevant to each moment of your learning journey.</p> <p>Without further ado. Get in the car!</p> <p></p>"},{"location":"intro/01-introduction/#speed-matters","title":"Speed Matters","text":"<p>A LOT. Period. C++ is one of the closest intelligible programming languages before reaching the level of  machine code, as known as Assembly Language. If you code in machine code, you obviously will code precisely what  you want the machine to do, but this task is too painful to be the de-facto standard of coding. So we need  something more straightforward and more human-readable. So C++ lies in this exact area of being close to assembly language and still able to be \"easily\" understandable. Note the quotes, they are there because it might not be that easy when you compare its syntax to other languages, C++ has to obey some constraints to keep the generated binary fast  as a mad horse while trying to be easier than assembly. Remember, it can always get worse.</p> <p></p>"},{"location":"intro/01-introduction/#why-does-speed-matter","title":"Why does speed matter?","text":"<p>Mainly because we don\u2019t want to waste time. Right? But it has more impactful consequences. Let\u2019s think a bit more, you  probably have a smartphone, and it lives only while it has enough energy on its battery. So, if you are a lazy  mobile developer and do not want to learn how to do code efficiently, you will make your app drain more energy  from the battery just by making the user wait for the task to be finished or by doing lots of unnecessary  calculations! You will be the reason the user has not enough power to use their phones up to the end of the day.  In fact, you will be punishing your user by using your app. You don\u2019t want that, right? So let\u2019s learn how to code  appropriately. For the sake of the argument, worse than that, a lazy blockchain smart contract developer will make  their users pay more for extra gas fee usage for the extra inefficient CPU cycles.</p> <p></p>"},{"location":"intro/01-introduction/#language-benchmarks","title":"Language benchmarks","text":"<p>I don\u2019t want to point fingers at languages, but, hey, excuse me, python, are you listening to me, python? Python?  Please answer! reference cpp vs python.  Nevermind. It is still trying to figure things out. Ah! Hey ruby, don\u2019t be shy, I know you look  gorgeous, and I  admire you a lot, but can you dress up faster and be ready to run anytime soon? </p> <p>You don\u2019t need makeup to run fast. That\u2019s the idea. If the language does lots of fancy stuff, it won\u2019t be extracting the juicy power of the CPU.</p> <p>So let\u2019s first clarify some concepts for a fair comparison. Some languages do not generate binaries that run in your  CPU. Some of them run on top of a virtual machine. The Virtual Machine(VM) is a piece of software that, in runtime,  translates the bytecode or even compiles source code to something the CPU can understand. It\u2019s like an old car;  some of them will make you wait for the ignition or even get warm enough to run fast. I am looking at you Java and JavaScript. It is a funny concept, I admit, but you can see here that the ones that run on top of a translation device  would never run as fast as a compiled binary ready to run on the CPU.</p> <p>So let\u2019s bring some ideas from my own experience, and I invite you to test by yourself. Just search for \"programming  languages benchmark\" on your preferred search engine or go here. </p> <p></p> <p>I don\u2019t want to start a flame-war. Those numbers might be wrong, but the overall idea is correct. Assuming C++ does not  add much overhead to your native binary, let\u2019s set the speed to run as 1x. Java would be around 1.4x slower, and  JavaScript is 1.6x, python 40x, and ruby 100x. The only good competitor in the house is Rust because its compiled code  runs straight on the CPU efficiently with lots of quality-of-life additions. Rust gives almost similar results if  you do not play around with memory-intensive problems. Another honorable mention is WASM - Web Assembly, although it is  a bytecode for a virtual machine, many programming languages are able to target it(compile for it), it is becoming blazing fast and it is getting traction nowadays, keep tuned. </p> <p></p>"},{"location":"intro/01-introduction/#who-should-learn-c","title":"Who should learn C++","text":"<p>YOU! Yes, seriously, I don\u2019t know you, but I am pretty sure you should know how to code in any language. C++  can be challenging, it is a fact, but if you dare to challenge yourself to learn it, your life will be somewhat better.</p> <p>Let\u2019s cut to the bullets:</p> <ol> <li>The ones who seek to build efficient modules for mobile apps, such as the video/image processing unit;</li> <li>Game developers. Even the gameplay developers that usually only script things should know how to ride a horse(CPU)     fast;</li> <li>Researchers looking to not waste time by coding inefficient code and wait hours, even days, to see the result of     their calculations. They should reduce the costs of renting CPU clusters;</li> <li>Computer scientists are those who should know how a computer works. After all, C++ is one of the preferred     programming languages that unlocks all the power of the CPU;</li> <li>Engineers, in general, should know how to simulate things efficiently;</li> </ol>"},{"location":"intro/01-introduction/#how-do-machines-run-code","title":"How do machines run code?","text":"<p>The first thing is: the CPU does not understand any programming language, only binary instructions. So you have to  convert your code into something the machine can understand. This is the job of the compiler. A compiler is a  piece of software that reads a text file written following the rules of a programming language and essentially  converts it into binary instructions that the CPU can execute. There are many strategies and many ways of doing it. So, given its nature of being near assembly, with C++, you will control precisely what instructions the CPU will  run.</p> <p>But, there is a catch here: for each CPU, you will need a compiler for that instruction set. Ex.: the compiler GCC can generate an executable program for ARM processors, and the generated program won\u2019t work on x86 processors; In the same  way, an x64 executable won\u2019t work on an x86; you need to match the binary instructions generated by the compiler with  the same instruction set available on the target CPU you want to run it. Some compilers can cross-compile: the compiler  runs in your machine on your CPU with its instruction set, but the binary generated only runs on a target machine with  its own instruction set.</p> <p></p>"},{"location":"intro/01-introduction/#program-life-cycle","title":"Program Life Cycle","text":"<p>Software development is complex and there is lots of styles, philosophies and standard, but the overall structure  looks like this:</p> <ol> <li>Analysis, Specification, Problem definition </li> <li>Design of the Software (pseudocode/algorithm, flowchart), Problem analysis</li> <li>Implementation / Coding</li> <li>Testing and Debugging - In TDD(Test Driven Development) we write the tests first.</li> <li>Maintenance - Analytics and Improvements</li> <li>End of Life</li> </ol>"},{"location":"intro/01-introduction/#pseudocode","title":"Pseudocode","text":"<p>Pseudocode is a way of expressing algorithms using a combination of natural language and programming constructs. It  is not a programming language and cannot be compiled or executed, but it provides a clear and concise way to  describe the steps of an algorithm. Here is an example of pseudocode that describes the process of finding the  maximum value in a list of numbers:</p> <pre><code>set maxValue to 0\nfor each number in the list of numbers\n  if number is greater than maxValue\n    set maxValue to number\noutput maxValue\n</code></pre> <p>Pseudocode is often used as a planning tool for programmers and can help to clarify the logic of a program before it  is written in a specific programming language. It can also be used to communicate algorithms to people who are not familiar with a particular programming language. Reference</p>"},{"location":"intro/01-introduction/#flowcharts","title":"Flowcharts","text":"<p>A flowchart is a graphical representation of a process or system that shows the steps or events in a sequential  order. It is a useful tool for demonstrating how a process works, identifying potential bottlenecks or  inefficiencies in a process, and for communicating the steps involved in a process to others. </p> <p>Flowcharts are typically composed of a series of boxes or shapes, connected by arrows, that represent the steps in  a process. Each box or shape usually contains a brief description of the step or event it represents. The arrows  show the flow or movement from one step to the next. </p> <p>Flowcharts can be used in a variety of settings, including business, engineering, and software development. They  are particularly useful for demonstrating how a process works, identifying potential issues or bottlenecks in the  process, and for communicating the steps involved in a process to others. </p> <p>There are many symbols and notations that can be used to create flowcharts, and different organizations  and industries may have their own standards or conventions for using these symbols. Some common symbols and  notations used in flowcharts include: </p> <ol> <li>Start and end symbols: These are used to indicate the beginning and end of a process.</li> <li>Process symbols: These are used to represent the various steps or events in a process.</li> <li>Decision symbols: These are used to represent a decision point in a process, where the flow of the process depends on the outcome of a decision. </li> <li>Connector symbols: These are used to connect the various symbols in a flowchart, showing the flow or movement from one step to the next.</li> <li>Annotation symbols: These are used to add additional information or notes to a flowchart.</li> </ol> <p>By using a combination of these symbols and notations, you can create a clear and concise flowchart that effectively communicates the steps involved in a process or system. Reference</p> <p>I suggest using the tool Code2Flow to write pseudocode and see the flowchart drawn in real  time. But you can draw them on Diagrams.</p>"},{"location":"intro/01-introduction/#practice","title":"Practice","text":"<p>Try to think ahead the problem definition by questioning yourself before expressing the algorithm as pseudocode or  flowchart:  - What are the inputs? - What is a valid input? - How to compute the math? - What is the output? - How many decimals is needed to express the result?</p> <p>Use diagrams to draw a flowchart or use Code2Flow to  write a working pseudocode to: 1. Compute the weighted average of two numbers. The first number has weight of 1 and the     second has weight of 3;  2. Area of a circle; 3. Compute GPA; 4. Factorial number;</p>"},{"location":"intro/01-introduction/#glossary","title":"Glossary","text":"<p>It is expected for you to know superficially these terms and concepts. Research about them. It is not strictly required, because we are going to cover them in class.</p> <ul> <li>CPU</li> <li>GPU</li> <li>ALU</li> <li>Main Memory</li> <li>Secondary Memory</li> <li>Programming Language</li> <li>Compiler</li> <li>Linker</li> <li>Assembler</li> <li>Pseudocode</li> <li>Algorithms</li> <li>Flowchart</li> </ul>"},{"location":"intro/01-introduction/#activities","title":"Activities","text":"<ol> <li>Sign up on beecrowd. If you are a enrolled student, look for the key in canvas to be assigned to the coding assignments. </li> <li>https://blockly.games/mazeLinks - test your ability to solve small problems via block programming</li> <li>https://codecombat.com/ - very interesting game</li> </ol>"},{"location":"intro/01-introduction/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion this is publicly  visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me.</p>"},{"location":"intro/02-tooling/","title":"Tools for C++ development","text":"<p>In order to effectively code in C++ you will need some tools.</p>"},{"location":"intro/02-tooling/#version-control-git","title":"Version Control - GIT","text":"<p>Git is a version control system that is used to track changes to files, including  source code, documents, and other types of files. It allows multiple people to work on the same files concurrently,  and it keeps track of all changes made to the files, making it easy to go back to previous versions or merge changes  made by different people. Git is widely used by developers for managing source code, but it can be used to track changes to any type of file. It is particularly useful for coordinating work on projects that involve multiple  people, as it allows everyone to see and track changes made by others. Reference.</p> <p>Github is a web-based platform for version control and collaboration on software  projects. It is a popular platform for developers to share and collaborate on code, as well as to track and manage  software development projects. GitHub provides version control using Git, a version control system that allows  developers to track changes to their codebase and collaborate with other developers on the same codebase. It also includes a range of features such as bug tracking, project management, and team communication tools. In addition to  being a platform for software development, GitHub is also a community of developers and a marketplace for buying and  selling software development services. Reference.</p> <p>In this course we are going to extensively use GITHUB functionalities. So create an account now with your  personal account. Use a meaningful username. Avoid names that hard to associate with you. If you have a educational  email or student id, apply for the Github Student Pack, so you will have access  to lots of free tools.</p> <p>GitKraken GitKraken is a Git client for Windows, Mac, and Linux that provides a  graphical interface for working with Git repositories. It allows users to manage Git repositories, create and review  changes to code, and collaborate with other developers. Some features of GitKraken include a visual representation  of the repository's commit history, the ability to stage and discard changes, and support for popular version  control systems like GitHub and GitLab. GitKraken is designed to be user-friendly and to make it easier for  developers to work with Git, particularly for those who may be new to version control systems.  Reference.</p> <p>Gitkraken is a paid software, and it is free for public repositories, but you can have all enterprise and premium functionalities enabled for free with the student pack and described before.  </p>"},{"location":"intro/02-tooling/#compiler","title":"Compiler","text":"<p>A compiler is a type of computer program that translates source code written in a programming language into machine  code that can be executed by a computer. The machine code is a sequence of instructions that are specific to a  particular computer architecture and operating system. The source code is written in a high-level programming  language, such as C++, Java, or Python, which is easier for humans to read and write. The compiler converts the  source code into machine code that can be run on a computer. There are different types of compilers, including  cross-compilers, which can compile code for one type of computer to run on another type of computer, and  just-in-time (JIT) compilers, which compile code at runtime. Compilers are an important part of the software  development process, as they allow developers to write code in a high-level language that is then translated into  machine code that can be run on a specific platform. Reference</p> <p>This where things get tricky, C++ compiles the code into a binary that runs directly on the processor and interacts  with the operating system. So we can have multiple combinations here. Most compilers are cross-platform, but there  is exceptions. And to worsen it, some Compilers are tightly coupled with some IDEs(see below, next item). </p> <p>I personally prefer to use CLang to be my target because it is the one that is most reliable cross-platform  compiler. Which means the code will work as expected in most of the scenarios, the feature support table is the same  across all platforms. But GCC is the more bleeding edge, which means usually it is the first to support all new  fancy features C++ introduces.</p> <p>No need to download anything here.</p>"},{"location":"intro/02-tooling/#cmake","title":"CMake","text":"<p>CMake CMake is a cross-platform free and open-source software tool for managing the build process of software using a compiler-independent method. It is designed to support directory hierarchies and applications that depend on multiple libraries. It is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice. Reference.</p> <p>If you use a good IDE(see next topic), you won't need to download anything here. </p>  CMake is typically used in conjunction with native build environments such as Make, Ninja, or Visual Studio. It can  also generate project files for IDEs such as Eclipse, Xcode, and Visual Studio.  Here is a simple example of a CMakeLists.txt file that can be used to build a program called \"myproject\" that consists of a single source file called \"main.cpp\":  <pre><code>cmake_minimum_required(VERSION 3.10)\nproject(myproject)\nadd_executable(myproject main.cpp)\n</code></pre>  To build the project, you would first generate a build directory, and then run CMake to build the files using the  detected compiler or IDE: <pre><code>cmake -S. -Bbuild\ncmake --build build -j20\n</code></pre> This will create a Makefile or a Visual Studio solution file in the build directory, depending on your platform and compiler. You can then use the native build tools to build the project by running \"make\" or opening the solution file in Visual Studio.  CMake provides many options and variables that can be used to customize the build process, such as setting compiler flags, specifying dependencies, and configuring installation targets. You can learn more about CMake by reading the documentation at https://cmake.org/."},{"location":"intro/02-tooling/#ide","title":"IDE","text":"<p>An integrated development environment (IDE) is a software application that provides comprehensive facilities to  computer programmers for software development. An IDE typically integrates a source code editor, build automation  tools, and a debugger. Some IDEs also include additional tools, such as a version control system, a class browser,  and a support for literate programming. IDEs are designed to maximize programmer productivity by providing tight-knit components with similar user interfaces. This can be achieved through features such as auto-complete, syntax highlighting, and code refactoring. Many IDEs also provide a code debugger, which allows the programmer to step through code execution and find and fix errors. Some examples of popular IDEs include Eclipse, NetBeans, Visual Studio, and Xcode. Each of these IDEs has its own set of features and capabilities, and developers may choose one based on their specific needs and preferences. Reference.</p> <p>In this course, it is strongly suggested to use an IDE in order to achieve higher quality of deliveries, a good IDE  effectively flatten the C++ learning curve. You can opt out and use everything by hand, of course, and it will deepen  your knowledge on how things work but be assured it can slow down your learning process. Given this course is result  oriented, it is not recommended to not use an IDE here. So use one.</p> <p>OPINION: The most pervasive C++ IDE is CLion and this the one I am going to use. If  you use it too, it would be easier to follow my recorded videos. It works on all platforms Windows, Linux and Mac. I  recommend downloading it via Jetbrains Toolbox. If you are a student, apply for student pack for free here. On Windows, CLion embeds  a GCC compiler or optionally can use visual studio, while on Macs it requires the xcode command line tools, and on  Linux, uses GCC from the system installation.</p> <p>The other options I suggest are:</p>"},{"location":"intro/02-tooling/#on-all-platforms","title":"On all platforms","text":"<p>REPLIT - an online and real-time multiplayer IDE. It is slow and lack many functionalities,  but can be used for small scoped activities or work with a friend.</p> <p>VSCode - a small and highly modularized code editor, it have lots of extensions,  but it can be complex to set up everything needed: git, cmake, compiler and other stuff.</p>"},{"location":"intro/02-tooling/#on-windows","title":"On Windows:","text":"<p>Visual Studio - mostly for Windows. When installing, mark C++ development AND  search and install additional tools \"CMake\". Otherwise, this repo won't work smoothly for you.</p> <p>DevC++ - an outdated and small IDE. Lacks lots of functionalities, but if you don't  have HD space or use an old machine, this can be your option. In long term, this choice would be bad for you for the  lack of functionalities. It is better to use REPLIT than this tool, in my opinion.</p>"},{"location":"intro/02-tooling/#on-osx","title":"On OSX","text":"<p>XCode - for OSX and Apple devices. It is required at least to have the Command  Line Tools. CLion on Macs depends on that. </p>  Xcode Command Line Tools is a small suite of software development tools that are installed on your Mac along with Xcode. These tools include the GCC compiler, which is used to compile C and C++ programs, as well as other tools such as Make and GDB, which are used for debugging and development. The Xcode Command Line Tools are necessary for working with projects from the command line, as well as for using certain software development tools such as Homebrew.  To install the Xcode Command Line Tools, you need to have Xcode installed on your Mac. To check if Xcode is already installed, open a Terminal window and type:  `xcode-select -p`  If Xcode is already installed, this command will print the path to the Xcode developer directory. If Xcode is not installed, you will see a message saying \"xcode-select: error: command line tools are not installed, use xcode-select --install to install.\"  To install the Xcode Command Line Tools, open a Terminal window and type:  `xcode-select --install`  This will open a window that prompts you to install the Xcode Command Line Tools. Follow the prompts to complete the installation.  Once the Xcode Command Line Tools are installed, you can use them from the command line by typing commands such as gcc, make, and gdb. You can also use them to install and manage software packages with tools like Homebrew."},{"location":"intro/02-tooling/#on-linux","title":"On Linux","text":"<p>If you are using Linux, you know the drill. No need for further explanations here, you are ahead of the others. </p>  If you are using an Ubuntu distro, you can try this to install most of the tools you will need here:  <pre><code>  sudo apt-get update &amp;&amp; sudo apt-get install -y build-essential git cmake lcov xcb libx11-dev libx11-xcb-dev libxcb-randr0-dev\n</code></pre>  You will have a plethora of editors and IDEs. The one I can suggest is the VSCode, Code::Blocks or KDevelop. But I  really prefer CLion."},{"location":"intro/02-tooling/#hello-world","title":"Hello World","text":"<pre><code>// this a single line comment and it is not compiled. comments are used to explain the code.\n// you can do single line comment by adding // in front of the line or\n// you can do multi line comments by wrapping your comment in /* and */ such as: /* insert comment here */\n/* this is\n * a multi line\n * comment\n */\n#include &lt;iostream&gt; // this includes an external library used to deal with console input and output\nusing namespace std; // we declare that we are going to use the namespace std of the library we just included \n// \"int\" means it should return an integer number in the end of its execution to communicate if it finished properly\n// \"main()\" function where the operating system will look for starting the code.\n// \"()\" empty parameters. this main function here needs no parameter to execute\n// anynthing between { and } is considered a scope. \n// everything stack allocated in this scope will be deallocated in the end of the scope. ex.: local variables. \nint main() {\n/* \"cout\" means console output. Print to the console the content of what is passed after the \n     * \"&lt;&lt;\" stream operator. Streams what in the wright side of it to the cout object\n     * \"endl\" means end line. Append a new line to the stream, in the case, console output.\n     */\ncout &lt;&lt; \"Hello World\" &lt;&lt; endl;\n/* tells the operating system the program finished without errors. Any number different from that is considered \n     * a error code or error number.\n     */\nreturn 0; }\n</code></pre> <p>Hello User <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt; // structure to deal with a char sequence, it is called string\nusing namespace std;\nint main(){\n// invites the user to write something\ncout &lt;&lt; \"Type your name: \" &lt;&lt; endl;\n/* * string means the type of the variable, this definition came from the string include\n     * username means the name of the variable, the container to hold and store the data\n     */\nstring username;\n/*\n     * cin mean console input. It captures data from the console.\n     * note the opposite direction of the stream operator. it streams what come from the cin object to the variable.\n     */\ncin &gt;&gt; username;\n// example of how to stream and concatenate texts to the console output;\ncout &lt;&lt; \"Hello \" &lt;&lt; username &lt;&lt; endl;\n}\n</code></pre></p>"},{"location":"intro/02-tooling/#common-errors","title":"Common Errors","text":""},{"location":"intro/02-tooling/#1-syntax-error","title":"1. Syntax error","text":"<p>Syntax errors in C++ are usually caused by mistakes in the source code that prevent the compiler from being able to understand it. Some common causes of syntax errors include: 1. Omitting a required component of a statement, such as a semicolon at the end of a line or a closing curly brace. 2. Using incorrect capitalization or spelling in a keyword or identifier. 3. Using the wrong punctuation, such as using a comma instead of a semicolon. 4. Mixing up the order of operations, such as using an operator that expects two operands before the operands have been provided.</p> <p>To fix a syntax error, you will need to locate the source of the error and correct it in the code. This can often be a challenging task, as syntax errors can be caused by a variety of factors, and it is not always immediately clear what the problem is. However, there are a few tools that can help you locate and fix syntax errors in your C++ code: 1. A compiler error message: When you try to compile your code, the compiler will often provide an error message  that can help you locate the source of the syntax error. These error messages can be somewhat cryptic, but they usually include the line number and a brief description of the problem. 2. A text editor with syntax highlighting: Many text editors, such as Visual Studio or Eclipse, include syntax highlighting, which can help you identify syntax errors by coloring different parts of the code differently. For example, keywords may be highlighted in blue, while variables may be highlighted in green. 3. A debugger: A debugger is a tool that allows you to step through your code line by line, examining the values of variables and the state of the program at each step. This can be a very useful tool for tracking down syntax errors, as it allows you to see exactly where the error occurs and what caused it.</p> <p>Reference</p>"},{"location":"intro/02-tooling/#2-logic-error","title":"2. Logic Error","text":"<p>A logic error in C++ is an error that occurs when the code produces unintended results or behaves in unexpected   ways due to a mistake in the logic of the program. This type of error is usually caused by a coding mistake, such as   using the wrong operator, omitting a necessary statement, or using the wrong variable. Here are some common causes of   logic errors in C++:</p> <ul> <li>Incorrect use of conditional statements (e.g., using the wrong comparison operator or forgetting to include a necessary else clause)</li> <li>Mistakenly using the assignment operator (=) instead of the equality operator (==) in a conditional statement</li> <li>Omitting a necessary loop iteration or failing to terminate a loop at the appropriate time</li> <li>Using the wrong variable or array index</li> <li>Incorrectly calling a function or passing the wrong arguments to a function </li> </ul> <p>To fix a logic error in C++, you will need to carefully examine your code and identify the mistake. It may be helpful to use a debugger to step through your code and see how it is executing, or to add print statements to help you understand what is happening at each step.</p> <p>Reference</p>"},{"location":"intro/02-tooling/#3-run-time-error","title":"3. Run-time error","text":"<p>A runtime error in C++ means that there is an error in your program that is causing it to behave unexpectedly or  crash during runtime, i.e., after you have compiled and run the program. There are many possible causes of runtime errors in C++, including:</p> <ul> <li>Dereferencing a null pointer</li> <li>Accessing an array out of bounds</li> <li>Using an uninitialized variable</li> <li>Trying to divide by zero</li> <li>Attempting to use an object that has been deleted or has gone out of scope</li> </ul> <p>To troubleshoot a runtime error, you'll need to identify the source of the error by examining the error message and the code that is causing the error. Some common tools and techniques you can use to troubleshoot runtime errors include:</p> <ul> <li>Using a debugger to step through your code line by line </li> <li>Printing out the values of variables to see where the error might be occurring</li> <li>Adding additional debug statements or logging to your code to help identify the source of the error</li> </ul> <p>It's also a good idea to ensure that you have compiled your code with debugging symbols enabled, as this will  allow you to use the debugger to get a better understanding of what is happening in your code. will cause the program  to crash during run-time</p> <p>Reference</p>"},{"location":"intro/02-tooling/#exercises","title":"Exercises:","text":"<ul> <li>Research and read about other notable errors: segmentation fault, stack overflow, buffer overflow.</li> <li>Hello World - just print <code>hello world</code>. </li> <li>Extremely Basic - use <code>int</code> as variable to store data.</li> </ul>"},{"location":"intro/02-tooling/#homework","title":"Homework","text":"<ol> <li>Setup your environment for your needs following the choices given above. If you are unsure, use CLion and you     will be mostly safe. </li> <li>Fork this repo privately. You will have to do your assignments there. Go to the home repo and hit fork.</li> <li>Clone this repo to your machine. gitkraken + github gitkraken clone gitkraken big tutorial</li> <li>Make sure the CMake option \"ENABLE_INTRO\" is set as ON in CMakeLists.txt file in the root directory in order to see     and enable all activities.</li> <li>(enrolled students) If you are enrolled in a class with me, share your repo with me, so I can track your evolution. And do the activities described there.</li> <li>(optional) star this repo :-)</li> </ol>"},{"location":"intro/02-tooling/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion this is publicly  visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me.</p>"},{"location":"intro/03-datatypes/","title":"Variables, Data Types, Expressions, Assignment, Formatting","text":""},{"location":"intro/03-datatypes/#variables","title":"Variables","text":"<p>Variables are containers to store information and facilitates data manipulation. They are named and typed. Detailed Reference</p> <p>Container sizes are measured in Bytes. Bytes are the smallest addressable unit in a computer. Each byte is composed by 8 bits. Each bit can be <code>1</code> or <code>0</code> (<code>true</code> or <code>false</code>). If one byte have 8 bits and each bit one can hold 2 different values, the combination of all possible cases that a byte can be is <code>2^8</code> which is <code>256</code>, so one byte can hold up to <code>256</code> different states or possibilities. </p>"},{"location":"intro/03-datatypes/#data-types","title":"Data Types","text":"<p>There are several types of variables in C++, including:</p> <ul> <li>Primitive data types: These are the most basic data types in C++ and include integer, floating-point, character, and boolean types.</li> <li>Derived data types: These data types are derived from the primitive data types and include arrays, pointers, and references.</li> <li>User-defined data types: These data types are defined by the programmer and include structures, classes, and enumerations.</li> </ul> <p>Detailed Reference</p>"},{"location":"intro/03-datatypes/#numeric-types","title":"Numeric types","text":"<p>There are some basic integer container types with different sizes. It can have some type modifiers to change the default behavior or the type.</p> <p>The common size of the integer containers are <code>1</code>(<code>char</code>), <code>2</code>(<code>short int</code>), <code>4</code>(<code>int</code>) or <code>8</code>(<code>long long</code>) bytes. For a more detailed coverage read this.</p> <p>NOTE1: But the only guarantee the C++ imposes is: <code>1 == sizeof(char) &lt;= sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long) &lt;= sizeof(long long)</code> and it can result in compiler defined behaviours where a <code>char</code> can have 8 bytes and a <code>long long</code> can be 1 byte.</p> <p>NOTE2: If you care about being cross-platform conformant, you have to always specify the sign modifier or use a more descriptive type such as listed here.</p> <p>For floating pointing numbers, the container size can be <code>4</code>(<code>float</code>), <code>8</code>(<code>double</code>), <code>10</code>(deprecated) or <code>16</code>(<code>long double</code>) bytes.</p> <p>The sign modifiers can be <code>signed</code> and <code>unsigned</code> and are applicable only for integer types. </p> <p>The default behavior of the types in a x86 cpu are as signed numbers and the first bit of the container is the signal. If the first bit is <code>0</code>, it means it is positive.  If the first bit is <code>1</code>, it means it is negative. More details.</p> <p>Which means that if the container is the size of 1 byte(8 bits), it have 1 bit for the signal and 7 bit for the content. So this number goes from <code>-128</code> up to <code>127</code>, this container is typically a <code>char</code>. The positive size has 1 less quantity in absolute than the negative because 0 is represented in positive side. There are <code>256</code> numbers between <code>-128</code> and <code>127</code> inclusive.     </p>"},{"location":"intro/03-datatypes/#char","title":"Char","text":"<p>A standard <code>char</code> type uses 1 byte to store data.</p> <p>It can represent <code>2^8</code> or <code>256</code> different numbers. By default, in x86 machine char is signed and the represented numbers can go from <code>-2^7</code> or <code>-128</code> up to <code>2^7 - 1</code> or <code>127</code>.</p> <p>Chars can be used to represent letters following the ascii table where each value means a specific letter, digit or symbol.</p> <p>Note</p> <p>A <code>char</code> can have different sizes to represent different character coding for different languages. If you are using hebrew, chinese, or others, you probably will need more than 1 byte to represent the chars. Use <code>char8_t</code> (UTF8), <code>char16_t</code>(UTF16) or <code>char36_t</code>(UTF32), to cover your character encoding for the language you are using.</p>"},{"location":"intro/03-datatypes/#integer","title":"Integer","text":"<p>Note</p> <p>Most of the information that I am covering here might be not precise, but the overall idea is correct. If you want a deep dive, read this.</p> <p>A standard <code>int</code> type uses 4 bytes to store data. It is signed by default.</p> <p>It can represent <code>2^32</code> or <code>4294967296</code> different numbers. As a signed type, it can represent numbers from <code>-2^31</code> or  <code>-2147483648</code> up to <code>2^31 - 1</code> or <code>2147483647</code>.</p> <p>The type <code>int</code> can accept sign modifiers as <code>signed</code> or <code>unsigned</code> to change the behavior of the first bit to act as a sign or not.</p> <p>The type <code>int</code> can accept size modifiers as <code>short</code> (2 bytes) or <code>long long</code> (8 bytes) to change the size and representation capacity of the container. Type declaration <code>short</code> and <code>short int</code> result in the same container size of 2 bytes. In the same way a <code>long long</code> or <code>long long int</code> reserves the same size of 8 bytes for the container.</p> <p>The type <code>long</code> or <code>long int</code> usually gives the same size of <code>int</code> as 4 bytes. Historical fact or myth: This abnormality, comes from the evolution of the definition of <code>int</code>: in the past, 2 bytes were enough for the majority of the scenarios in the 16 bits processors, but it frequently reached the limits of the container and it overflowed. So they changed the standard definition of a integer from being 2 bytes to 4 bytes, and created the short modifier. In this scenario the long int lost the reason to exist.</p> <p>Here goes a list of valid integer types and its probable size(it depends on the implementation, cpu architecture and operation system): - Size of 2 bytes: <code>short int</code>, <code>short</code>, <code>signed short int</code>, <code>signed short</code>, <code>unsigned short int</code>, <code>unsigned short</code>,  - Size of 4 bytes: <code>signed</code>, <code>unsigned</code>, <code>int</code>, <code>signed int</code>, <code>unsigned int</code>, <code>long int</code>, <code>long</code>, <code>signed long int</code>, <code>signed long</code>, <code>unsigned long int</code>, <code>unsigned long</code>, - Size of 8 bytes: <code>long long int</code>, <code>long long</code>, <code>signed long long int</code>, <code>signed long long</code>, <code>unsigned long long int</code>, <code>unsigned long long</code>. </p> <p>OPINION: I highly recommend the usage of these types instead, to ensure determinism and consistency between compilers, operating systems and cpu architectures.</p>"},{"location":"intro/03-datatypes/#float-pointing","title":"Float pointing","text":"<p>There are 3 basic types of floating point containers: <code>float</code>(4 bytes) and <code>double</code>(8 bytes) and <code>long double</code>(16 bytes) to represent fractional numeric types.</p> <p>The standard IEEE754 specifies how a floating point number is stored in the form of bits inside the container. The container holds 3 basic information to simulate the behavior of a fractional type inside a binary type: signal, exponent and fraction.</p> <p>Note</p> <p>This standard was very open to implementation definition in the past, and this is one of the root causes of non-determinism physics simulation. This is the main problem you cannot guarantee the same operation with the same pair of numbers will consistently give the same result across different types of processors and compilers, thus making the physics of a multiplayer game consistency hardly achievable. Many deterministic physics engines tend to not use this standard at all, and implement those behaviors via software on top of integers instead. There are 2 approaches to solve the floating-point determinism: softfloat that implement all the IEEE754 specifications via software, or implement some kind of fixed-point arithmetic on top of integers.</p>"},{"location":"intro/03-datatypes/#booleans","title":"Booleans","text":"<p><code>bool</code> is a special type that has the container size of 1 byte but the compiler can optimize and pack up to 8 <code>bool</code>s in one byte if they are declared in sequence.</p>"},{"location":"intro/03-datatypes/#enums","title":"Enums","text":"<p>An enumeration is a type that consists of a set of named integral constants. It can be defined using the <code>enum</code> keyword:</p> <pre><code>enum Color {\nRed,\nGreen,\nBlue\n};\n</code></pre> <p>This defines a new type called <code>Color</code>, which has three possible values: <code>Red</code>, <code>Green</code>, and <code>Blue</code>. By default, the values of these constants are <code>0</code>, <code>1</code>, and <code>2</code>, respectively. However, you can specify your own values:</p> <pre><code>enum Color {\nRed = 5,\nGreen,  // 6\nBlue    // 7\n};\n</code></pre> <p>You can then use the enumeration type just like any other type:</p> <pre><code>Color favoriteColor = Red;\n</code></pre> <p>Enumerations can also have their underlying type explicitly specified:</p> <pre><code>enum class Color : char {\nRed,\nGreen,\nBlue\n};\n</code></pre> <p>Here, the underlying type of the enumeration is <code>char</code>, so the constants <code>Red</code>, <code>Green</code>, and <code>Blue</code> will be stored as characters. The <code>enum class</code> syntax is known as a \"scoped\" enumeration, and it is recommended over the traditional <code>enum</code> syntax because it helps prevent naming conflicts. See the CppCoreGuidelines to understand better why you should prefer using this.</p>"},{"location":"intro/03-datatypes/#special-derived-type-string","title":"Special derived type: string","text":"<p><code>string</code> is a derived type and in order to use it, string should be included in the beginning of the file or in the header. <code>char</code> are the basic unit of a <code>string</code> and is used to store words as a sequence of chars.</p> <p>In C++, a string is a sequence of characters that is stored in an object of the <code>std::string</code> class. The <code>std::string</code> class is part of the C++ Standard Library and provides a variety of functions and operators for manipulating strings.</p>"},{"location":"intro/03-datatypes/#variable-naming","title":"Variable Naming","text":"<p>Variable names are called identifiers. In C++, you can use any combination of letters, digits, and underscores to name a variable, it should follow some rules: - Variables can have numbers, en any position, except the first character, so the name does not begin with a digit. Ex. <code>point2</code> and <code>vector2d</code> are allowed, but <code>9life</code> isn't; - Variable names are case-sensitive, so \"myVar\" and \"myvar\" are considered to be different variables; - Can have <code>_</code> in any position of the identifier. Ex. <code>_myname</code> and <code>user_name</code> are allowed; - It is not a reserved keyword;</p> <p>Keep in mind that it is a good practice to choose descriptive and meaningful names for your variables, as this can make your code easier to read and understand. Avoid using abbreviations or acronyms that may not be familiar to others who may read your code.</p> <p>It is also important to note that C++ has some naming conventions that are commonly followed by programmers. For example, it is common to use camelCase or snake_case to separate words in a variable name, and to use all lowercase letters for variables that are local to a function and all uppercase letters for constants.</p>"},{"location":"intro/03-datatypes/#variable-declaration","title":"Variable declaration","text":"<p>Variable declaration in C++ follows this pattern. <pre><code>TYPENAME VARIABLENAME;\n</code></pre> <code>TYPENAME</code> can be the name of any predefined type. See Variable Types for the types. <code>VARIABLENAME</code> can be anything as long it follow the naming rules. See Variable Naming for the naming rules.</p> <p>Note</p> <p>A given variable name can only be declared once in the same context / scope. If you try to redeclare the same variable, the compiler will accuse an error.</p> <p>Note</p> <p>You can redeclare the same variable name in different scopes. If one scope is parent of the other, the current will be used and will shadow the content of the one from outer scope. We are going to cover this more when we are covering multi-file projects and functions.</p> <p>Examples:</p> <pre><code>int a;       // integer variable\nfloat pi;    // floating-point variable\nchar c;      // character variable\nbool d;      // boolean variable\nstring name; // string variable \n</code></pre> <p>Note</p> <p>We are going to cover later in this course other complex types in other modules such as arrays, pointers and references.</p>"},{"location":"intro/03-datatypes/#variable-assignment","title":"Variable assignment","text":"<p><code>=</code> operator means that whatever the container have will be overwritten by the result of the right side statement. You should read it not as <code>equal</code> but as <code>receives</code> to avoid misunderstanding. Reference</p> <pre><code>int a = 10;         // integer variable\nfloat pi = 3.14;    // floating-point variable\nchar c = 'A';       // character variable\nbool d = true;      // boolean variable\nstring name = \"John Doe\"; // string variable \n</code></pre> <p>Every variable, by default, is not initialized. It means that you have to set the content of it after declaring. If the variable is read before the assignment, its content is garbage, it will read whatever is set in the memory stack for the given container location. So the best approach is to always set a value when a variable is declared or be assured that every variable is never read before an assigment.</p> <p>A <code>char</code> variable can be assigned by integer numbers or any characters between single quotes. <pre><code>char c;\nc = 'A'; // the content is 65 and the representation is A. see ascii table.\nc = 98; // the content is 98 and the representation is b. see ascii table.\n</code></pre></p> <p>A <code>bool</code> is by default either <code>true</code> or <code>false</code>, but it can be assigned by numeric value following this rule: - if the value is <code>0</code>, then the value stored by the variable is <code>false</code> (<code>0</code>); - if the value is anything different than <code>0</code>, the value stored is <code>true</code> (<code>1</code>);</p> <p>To convert a <code>string</code> to a <code>int</code>, you have to use a function stoi(for <code>int</code>), stol(for <code>long</code>) or stoll(for <code>long long</code>) because both types are not compatibles.</p> <p>To convert a <code>string</code> to a <code>float</code>, you have to use a function stof(for <code>float</code>), stod(for <code>double</code>), or stold(for <code>long double</code>) because both types are not compatibles.</p>"},{"location":"intro/03-datatypes/#literals","title":"Literals","text":"<p>Literals are values that are expressed freely in the code. Every numeric type can be appended with suffixes to specify explicitly the type to avoid undefined behaviors or compiler defined behaviors such as implicit cast or container size. </p>"},{"location":"intro/03-datatypes/#integer-literals","title":"Integer literals","text":"<p>There are 4 types of integer literals.  - decimal-literal: never starts with digit <code>0</code> and followed by any decimal digit; - octal-literal: starts with <code>0</code> digit and followed by any octal digit; - hex-literal: starts with <code>0x</code> or <code>0X</code> and followed by any hexadecimal digit; - binary-literal: starts with <code>0b</code> or <code>0B</code> and followed by any binary digit;</p> <pre><code>// all of these variables holds the same value, 42, but using different bases.\n// the right side of the = are literals\nint deci = 42; int octa = 052; int hexa = 0x2a; int bina = 0b101010;\n</code></pre> <p>Suffixes: - <code>no suffix</code> provided: it will use the first smallest signed integer container that can hold the data starting from <code>int</code>; - <code>u</code> or <code>U</code>: it will use the first smallest unsigned integer container that can hold the data starting from <code>unsigned int</code>; - <code>l</code> or <code>L</code>: it will use the first smallest signed integer container that can hold the data starting from <code>long</code>; - <code>lu</code> or <code>LU</code>: it will use the first smallest unsigned integer container that can hold the data starting from <code>unsigned long</code>; - <code>ll</code> or <code>LL</code>: it will use the long long signed integer container <code>long long</code>; - <code>llu</code> or <code>LLU</code>: it will use the long long unsigned integer container <code>unsigned long long</code>;</p> <pre><code>unsigned long long l1 = 15731685574866854135ull;\n</code></pre> <p>Reference</p>"},{"location":"intro/03-datatypes/#float-point-literals","title":"Float point literals","text":"<p>There are 3 suffixes in floating point decimals. - <code>no suffix</code> means the container is a double; - <code>f</code> suffix means it is a float container; - <code>l</code> suffix means it is a long double container;</p> <p>A floating point literal can be defined by 3 ways: - digit-sequence decimal-exponent suffix(optional).      - <code>1e2</code> means its a <code>double</code> with the value of <code>1*10^2</code> or <code>100</code>;     - <code>1e-2f</code> means its a <code>float</code> with the value of <code>1*10^-2</code> or <code>0.01</code>; - digit-sequence . decimal-exponent(optional) suffix(optional).     - <code>2.</code> means it is a <code>double</code> with value of <code>2</code>;      - <code>2.f</code> means it is a <code>float</code> with value of <code>2</code>;     - <code>2.1l</code> means it is a <code>long double</code> with value of <code>2.1</code>; - digit-sequence(optional) . digit-sequence decimal-exponent(optional) suffix(optional)     - <code>3.1415f</code> means it is a <code>float</code> with value of <code>3.1415</code>;     - <code>.1</code> means it is a <code>double</code> with value of <code>0.1</code>;     - <code>0.1e1L</code> means it is a <code>long double</code> with value of <code>1</code>;</p> <p>Reference</p>"},{"location":"intro/03-datatypes/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>In C++, you can perform common arithmetic operations is statements using the following operators Reference:</p> <ul> <li>Addition: <code>+</code></li> <li>Subtraction: <code>-</code></li> <li>Multiplication: <code>*</code></li> <li>Division: <code>/</code></li> <li>Modulus (remainder): <code>%</code></li> </ul> <p>There are two special cases called unary increment / decrement operators that may occur in before(prefixed) or after(postfixed) the variable name reference. If prefixed it is executed first and then return the result, if postfixed, it returns the current value and then execute the operation: - Increment: <code>++</code>;  - Decrement: <code>--</code>;</p> <p>There are shorthand assignment operators reference that reassign the value of the variable after executing the arithmetic operation with the right side of the operator with the old value of the variable: - Addition: <code>+=</code> - Subtraction: <code>-=</code> - Multiplication: <code>*=</code> - Division: <code>/=</code> - Modulus (remainder): <code>%=</code></p> <p>Here is an example of how to use these operators in a C++ program: <pre><code>#include &lt;iostream&gt;\nint main() {\nint a = 5;\nint b = 2;\nstd::cout &lt;&lt; a + b &lt;&lt; std::endl; // Outputs 7\nstd::cout &lt;&lt; a - b &lt;&lt; std::endl; // Outputs 3\nstd::cout &lt;&lt; a * b &lt;&lt; std::endl; // Outputs 10\nstd::cout &lt;&lt; a / b &lt;&lt; std::endl; // Outputs 2\nstd::cout &lt;&lt; a % b &lt;&lt; std::endl; // Outputs 1\na++;\nstd::cout &lt;&lt; a &lt;&lt; std::endl; // Outputs 6\na--;\nstd::cout &lt;&lt; a &lt;&lt; std::endl; // Outputs 5\nstd::cout &lt;&lt; a++ &lt;&lt; std::endl; // Outputs 5 because it first returns the current value and then increments.\nstd::cout &lt;&lt; a &lt;&lt; std::endl; // Outputs 6\nstd::cout &lt;&lt; --a &lt;&lt; std::endl; // Outputs 5 because it first decrements the value and then return it already changed;\nstd::cout &lt;&lt; a &lt;&lt; std::endl; // Outputs 5\nb *= 2; // it is a short version of b = b * 2; \nstd::cout &lt;&lt; b &lt;&lt; std::endl; // Outputs 4\nb /= 2; // it is a short version of b = b / 2; \nstd::cout &lt;&lt; b &lt;&lt; std::endl; // Outputs 2\nreturn 0;\n}\n</code></pre></p> <p>Note that the division operator (<code>/</code>) performs integer division if both operands are integers. If either operand is a floating-point type, the division will be performed as floating-point division. So <code>5/2</code> is <code>2</code> because both are integers, se we use integer division, but <code>5/2.</code> is <code>2.5</code> because the second one is a <code>double</code> literal.</p> <p>Also, the modulus operator (<code>%</code>) returns the remainder of an integer division. For example, <code>7 % 3</code> is equal to <code>1</code>, because <code>3</code> goes into <code>7</code> two times with a remainder of <code>1</code>.</p>"},{"location":"intro/03-datatypes/#implicit-cast","title":"Implicit cast","text":"<p>Implicit casting, also known as type coercion, is the process of converting a value of one data type to another data type without the need for an explicit cast operator. In C++, this can occur when an expression involves operands of different data types and the compiler automatically converts one of the operands to the data type of the other in order to perform the operation.</p> <p>For example: <pre><code>int a = 1;\ndouble b = 1.5;\nint c = a + b; // c is automatically converted to a double before the addition\n</code></pre> In this example, the value of <code>b</code> is a double, while the value of <code>a</code> is an <code>int</code>. When the addition operator is used, the compiler will automatically convert a to a <code>double</code> before performing the addition. The result of the expression is a <code>double</code>, so <code>c</code> is also automatically converted to a <code>double</code> before being assigned the result of the expression.</p> <p>Implicit casting can also occur when assigning a value to a variable of a different data type. For example: <pre><code>int a = 2;\ndouble b = a; // a is automatically converted to a double before the assignment\n</code></pre> In this case, the value of <code>a</code> is an int, but it is being assigned to a double variable. The compiler will automatically convert the value of <code>a</code> to a <code>double</code> before making the assignment.</p> <p>It's important to be aware of implicit casting, because it can sometimes lead to unexpected results or loss of precision if not handled properly. In some cases, it may be necessary to use an explicit cast operator to explicitly convert a value to a specific data type.</p>"},{"location":"intro/03-datatypes/#explicit-cast","title":"Explicit cast","text":"<p>In C++, you can use an explicit cast operator to explicitly convert a value of one data type to another. The general syntax for an explicit cast are:</p> <pre><code>// ref: https://en.wikibooks.org/wiki/C%2B%2B_Programming/Programming_Languages/C%2B%2B/Code/Statements/Variables/Type_Casting\n(TYPENAME) value; // regular c-style. do not use this extensively\nstatic_cast&lt;TYPENAME&gt;(value); // c++ style conversion, arguably it is the preferred style. use this if you know what you are doing.\nTYPENAME(value); // functional initialization, slower but safer. might not work for every case. use this if you are unsure or want to be safe.\nTYPENAME{value}; // initialization style, faster, convenient, concise and arguably safer because it triggers warnings. use this for the general case. \n</code></pre> <p>For example: <pre><code>int a = 7;\ndouble b = (double) a; // a is explicitly converted to a double\n</code></pre></p> <p>In this example, the value of <code>a</code> is an <code>int</code>, but it is being explicitly converted to a <code>double</code> using the explicit cast operator. The result of the cast is then assigned to the <code>double</code> variable <code>b</code>.</p> <p>Explicit casts can be useful in situations where you want to ensure that a value is converted to a specific data type, regardless of the data types of the operands in an expression. However, it's important to be aware that explicit casts can also lead to unexpected results or loss of precision if not used carefully. This behaviour is called narrowing.</p> <p>C-style: <pre><code>int a = 20001;\nchar b = (char) a; // b is assigned the ASCII value for the character '!'\n</code></pre></p> <p>In this case, the value of <code>a</code> is an <code>int</code>, but it is being explicitly converted to a <code>char</code> using the explicit cast operator. However, the range of values that can be represented by a <code>char</code> is much smaller than the range of values that can be represented by an <code>int</code>, so the value of <code>a</code> is outside the range that can be represented by a <code>char</code>. As a result, <code>b</code> is assigned the ASCII value for the character <code>1</code>, which is not the same as the original value of <code>a</code>. The value <code>!</code> is <code>33</code> in ASCII table, and <code>33</code> is the result of the <code>20001 % 256</code> where <code>256</code> is the number of elements the <code>char</code> can represent. In this case, what happened was a bug that is hard to track called <code>int overflow</code>.</p>"},{"location":"intro/03-datatypes/#auto-keyword","title":"<code>auto</code> keyword","text":"<p><code>auto</code> keyword is mostly a syntax sugar to automatically infer the data type. It is used to avoid writing the full declaration of complex types when it is easily inferred. <code>auto</code> is not a dynamic type, once it is inferred, it cannot be changed later like in other dynamic typed languages such as javascript.</p> <pre><code>auto i = 0; // automatically inferred as an integer type;\nauto f = 0.0f; // automatically inferred as a float type;\ni = \"word\"; // this won't work, because it was already inferred as an integer and integer container cannot hold string\n</code></pre>"},{"location":"intro/03-datatypes/#formatting","title":"Formatting","text":"<p>There are many functions to help you format the output in the way it is expected, here goes a selection of the most useful ones I can think. Yon can find more functions and manipulators here and here.</p> <p>To set a fixed precision for floating point numbers in C++, you can use the <code>std::setprecision</code> manipulator from the <code>iomanip</code> header, along with the <code>std::fixed</code> manipulator.</p> <p>Here's an example of how to use these manipulators to output a floating point number with a fixed precision of 3 decimal places: <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\nint main() {\ndouble num = 3.14159265;\nstd::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt; num &lt;&lt; std::endl;\n// Output: 3.142\nreturn 0;\n}\n</code></pre> You can also use the <code>std::setw</code> manipulator to set the minimum field width for the output, which can be useful for aligning the decimal points in a table of numbers.</p> <p>For example: <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\nint main() {\ndouble num1 = 3.14159265;\ndouble num2 = 123.456789;\nstd::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt; std::setw(8) &lt;&lt; num1 &lt;&lt; std::endl;\nstd::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt; std::setw(8) &lt;&lt; num2 &lt;&lt; std::endl;\n// Output:\n//   3.142\n// 123.457\nreturn 0;\n}\n</code></pre> Note that these manipulators only affect the output stream, and do not modify the values of the floating point variables themselves. If you want to store the numbers with a fixed precision, you will need to use a different method such as rounding or truncating the numbers.</p> <p>To align text to the right or left in C++, you can use the <code>setw</code> manipulator in the <code>iomanip</code> header and the <code>right</code> or <code>left</code> flag. More details here </p> <p>Here is an example: <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\nint main() {\nstd::cout &lt;&lt; std::right &lt;&lt; std::setw(10) &lt;&lt; \"Apple\" &lt;&lt; std::endl;\nstd::cout &lt;&lt; std::left &lt;&lt; std::setw(10) &lt;&lt; \"Banana\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre></p> <p>Both will print inside a virtual column with the size of 10 chars. This will output the following: <pre><code>    Apple\nBanana   </code></pre></p>"},{"location":"intro/03-datatypes/#optional-exercises","title":"Optional Exercises","text":"<p>Do all exercises up to this topic here.</p> <p>In order to get into coding, the easiest way to learn is by solving coding challenges. It is like learning any new language, you have to be exposed and involved. Do not do only the homeworks, otherwise you are going to fail. Another metaphor is: the homework is the like a competition that you have to run to prove that you are trained, but in order to train, you have to do small runs and do small steps first, so you have to train yourself ot least 2x per week.</p> <p>The best way to train yourself in coding and solving problems in my opinion is this:</p> <ol> <li>Sort Beecrowd questions from the most solved to the least solved questions here is the link of the list already filtered.</li> <li>Start solving the questions from the top to the bottom. Chose one from de the beginning, it would be one of the easiest;</li> <li>If you are feeling comfortable and being able to solve more than 3 per hour, you are allowed to skip some of the questions. It is just like in a gym, when you get used with the load, you increase it. Otherwise continue training slowly.</li> </ol>"},{"location":"intro/03-datatypes/#homework","title":"Homework","text":"<p>banknotes and coins - Here you will use formatting, modulus, casting, arithmetic operations, compound assignment. You don't need to use if-else.</p> <p>Hint. Follow this only if dont find your way of solving it. You can read the number as a double, multiply by 100 and then do a sequence of modulus and division operations. <pre><code>double input; // declare the container to store the input\ncin &gt;&gt; input; // read the input\nlong long cents = static_cast&lt;long long&gt;(input * 100); // number of cents. Note: if you just use float, you will face issues. \nlong long notes100 = cents/10000; // get the number of notes of 100 dollar (100 units of 100 cents) \ncents %= 10000; // remove the amount of 100 dollars\n</code></pre></p> <p>Another good way of solving it avoiding casting is reading the number as string and removing the point. Never use <code>float</code> for money</p> <pre><code>string input; // declare the container to store the input\ncin &gt;&gt; input; // read the input\n// given every input will have the dot, we should remove it. remove the dot `.`\ninput = input.erase(str.find('.'), 1);\n// not it is safe to use int, because no bit is lost in floating casting and nobody have more than MAX_INT cents.  \nint cents = stoll(input); // number of cents. \nlong long notes100 = cents/10000; // get the number of notes of 100 dollar (100 units of 100 cents) \ncents %= 10000; // update the remaining cents by removing the amount of 100 dollars in cents units\n</code></pre>"},{"location":"intro/03-datatypes/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion. Nhis is publicly visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me. Or visit the tutoring service.</p>"},{"location":"intro/04-conditionals/","title":"Conditionals, Switch, Boolean Operations","text":"<ul> <li>Boolean Operations</li> <li>Bitwise Operations</li> <li>Conditionals</li> <li>Switch</li> </ul>"},{"location":"intro/04-conditionals/#boolean-operations","title":"Boolean Operations","text":"<p>In C++, the boolean operators are used to perform logical operations on boolean values (values that can only be true or false).</p>"},{"location":"intro/04-conditionals/#and","title":"AND","text":"<p>And operators can be represented by <code>&amp;&amp;</code>(most common syntax) or <code>and</code>(C++20 and up - alternative operator representation). This operator represents the logical <code>AND</code> operation. It returns <code>true</code> if both operands are <code>true</code>, and <code>false</code> otherwise. - It needs only if one <code>false</code> element to make the result be <code>false</code>; - It needs all elements to be <code>true</code> in order the result be <code>true</code>;</p> <code>p</code> <code>q</code> <code>p and q</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>false</code> <code>false</code> <code>true</code> <code>false</code> <code>false</code> <code>folse</code> <code>false</code> <p>For example:</p> <pre><code>bool x = true;\nbool y = false;\nbool z = x &amp;&amp; y; // z is assigned the value false\n</code></pre>"},{"location":"intro/04-conditionals/#or","title":"OR","text":"<p>Or operators can be represented by <code>||</code>(most common syntax) or <code>or</code>(C++20 and up - - alternative operator representation). This operator represents the logical <code>OR</code> operation. It returns <code>true</code> if one operands are <code>true</code>, and <code>false</code> if all are <code>false</code>. - It needs only if one <code>true</code> element to make the result be <code>true</code>; - It needs all elements to be <code>false</code> in order the result be <code>false</code>; </p> <code>p</code> <code>q</code> <code>p or q</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>true</code> <code>false</code> <code>folse</code> <code>false</code> <p>For example:</p> <pre><code>bool x = true;\nbool y = false;\nbool z = x || y; // z is assigned the value true\n</code></pre>"},{"location":"intro/04-conditionals/#not","title":"NOT","text":"<p>Not operator can be represented by <code>!</code>(most common syntax) or <code>not</code>(C++20 and up - alternative operator representation). This operator represents the logical <code>NOT</code> operation. It returns <code>true</code> if operand after it is <code>false</code>, and <code>true</code> otherwise._</p> <code>p</code> <code>not p</code> <code>true</code> <code>false</code> <code>false</code> <code>true</code> <p>For example:</p> <pre><code>bool x = true;\nbool y = !x; // y is assigned the value false\n</code></pre>"},{"location":"intro/04-conditionals/#bitwise-operations","title":"Bitwise operations","text":"<p>In C++, the bitwise operators are used to perform operations on the individual bits of an integer value.</p>"},{"location":"intro/04-conditionals/#and_1","title":"AND","text":"<p>Bitwise <code>and</code> can be represented by <code>&amp;</code> or <code>bitand</code>(C++20 and up - alternative operator representation: This operator performs the bitwise AND operation. It compares each bit of the first operand to the corresponding bit of the second operand, and if both bits are 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0. For example:</p> <pre><code>int x = 5; // binary representation is 0101\nint y = 3; // binary representation is 0011\nint z = x &amp; y; // z is assigned the value 1, which is binary 0001\n</code></pre>"},{"location":"intro/04-conditionals/#or_1","title":"OR","text":"<p>Bitwise <code>or</code> can be represented by <code>|</code> or <code>bitor</code>(C++20 and up - alternative operator representation: This operator performs the bitwise OR operation. It compares each bit of the first operand to the corresponding bit of the second operand, and if either bit is 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0. For example:</p> <pre><code>int x = 5; // binary representation is 0101\nint y = 3; // binary representation is 0011\nint z = x | y; // z is assigned the value 7, which is binary 0111\n</code></pre>"},{"location":"intro/04-conditionals/#xor","title":"XOR","text":"<p>Bitwise <code>xor</code> can be represented by <code>^</code> or <code>bitxor</code>(C++20 and up - alternative operator representation: This operator performs the bitwise XOR (exclusive OR) operation. It compares each bit of the first operand to the corresponding bit of the second operand, and if the bits are different, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.</p> <pre><code>int x = 5; // binary representation is 0101\nint y = 3; // binary representation is 0011\nint z = x ^ y; // z is assigned the value 6, which is binary 0110\n</code></pre> <p>Bitwise xor is a type of binary sum without carry bit.</p>"},{"location":"intro/04-conditionals/#not_1","title":"NOT","text":"<p>Bitwise <code>not</code> can be represented by <code>~</code> or <code>bitnot</code>(C++20 and up - alternative operator representation: This operator performs the bitwise NOT (negation) operation. It inverts each bit of the operand (changes 1 to 0 and 0 to 1). For example:</p> <pre><code>int x = 5; // binary representation is 0101\nint y = ~x; // y is assigned the value -6, which is binary 11111010. See complement of two for more details.\n</code></pre>"},{"location":"intro/04-conditionals/#shift","title":"SHIFT","text":"<p>In C++, the shift operators are used to shift the bits of a binary number to the left or right. Pay attention to not mix with the same ones used to strings, in that case they are called stream operators. There are two shift operators:</p> <ol> <li><code>&lt;&lt;</code>: This operator shifts the bits of the left operand to the left by the number of positions specified by the right operand. For example:</li> </ol> <pre><code>int x = 2; // binary representation is 10\nx = x &lt;&lt; 1; // shifts the bits of x one position to the left and assigns the result to x\n// x now contains 4, which is binary 100\n</code></pre> <ol> <li><code>&gt;&gt;</code>: This operator shifts the bits of the left operand to the right by the number of positions specified by the right operand. For example:</li> </ol> <pre><code>int x = 4; // binary representation is 100\nx = x &gt;&gt; 1; // shifts the bits of x one position to the right and assigns the result to x\n// x now contains 2, which is binary 10\n</code></pre> <p>The shift operators are often used to perform operations more efficiently than can be done with other operators. They can also be used to extract or insert specific bits from or into a value.</p>"},{"location":"intro/04-conditionals/#conditionals","title":"Conditionals","text":"<p>Conditionals are used to branch and execute different blocks of code based on whether a certain condition is true or false. There are several types of conditionals, including:</p>"},{"location":"intro/04-conditionals/#if-clause","title":"if clause","text":"<p><code>if</code> statements: These execute a block of code if a certain condition is <code>true</code>. If statements usually uses comparison operators or any result that can be transformed as boolean - any number different than <code>0</code> is considered <code>true</code>, only <code>0</code> is considered <code>false</code>. </p> <p>Comparison operator is used to compare the value of two operands. The operands can be variables, expressions, or constants. The comparison operator returns a Boolean value of true or false, depending on the result of the comparison. There are several comparison operators available:</p> <ul> <li><code>==</code>: returns <code>true</code> if the operands are equal;</li> <li><code>!=</code>: returns <code>true</code> if the operands are not equal;</li> <li><code>&gt;</code>: returns <code>true</code> if the left operand is greater than the right operand;</li> <li><code>&lt;</code>: returns <code>true</code> if the left operand is less than the right operand;</li> <li><code>&gt;=</code>: returns <code>true</code> if the left operand is greater than or equal to the right operand;</li> <li><code>&lt;=</code>: returns <code>true</code> if the left operand is less than or equal to the right operand;</li> </ul> <p>For example: <pre><code>if (x &gt; y) {\n// code to execute if x is greater than y\n}\n</code></pre></p> <p>If it appears without scope <code>{}</code>, the condition will applied only to the next statement. For example  <pre><code>if (x &gt; y) doSomething(); // only happens if x &gt; y is evaluated as true\notherThing(); // this will always occur.  \n</code></pre> Inline conditional: <pre><code>if (x &gt; y) doSomething(); // only happens if x &gt; y is evaluated as true\n</code></pre> <pre><code>if (x &gt; y) {doSomething();} // only happens if x &gt; y is evaluated as true\n</code></pre></p> <p>A common source of error is adding a <code>;</code> after the condition. In this case, the compiler will understand that it is an empty statement and always execute the next statement.  <pre><code>if (x &gt; y); // note the inline empty statement here finished with a `;`\ndoSomething(); // this will always happen\n</code></pre></p> <p>Note</p> <p>It is preferred to always create scopes with <code>{}</code>, but there is no need to have them if you have only one statement that will happen for that condition.</p>"},{"location":"intro/04-conditionals/#if-else-clause","title":"if-else clause","text":"<p>All the explanations from <code>if</code> applies here but now we have a fallback case.</p> <p><code>if-else</code> statements: These execute a block of code if a certain condition is true, and a different block of code if the condition is false. For example:</p> <pre><code>if (x &gt; y) {\n// code to execute if x is greater than y\n} else {\n// code to execute if x is not greater than y\n}\n</code></pre> <p>All the explanations about scope on the <code>if</code> clause described before, can be applied to the <code>else</code>.</p>"},{"location":"intro/04-conditionals/#ternary-operator","title":"Ternary Operator","text":"<p>The ternary operator is also known as the conditional operator. It is used to evaluate a condition and return one value if the condition is true and another value if the condition is false. The syntax for the ternary operator is:</p> <pre><code>condition ? value_if_true : value_if_false\n</code></pre> <p>For example:</p> <pre><code>int a = 5;\nint b = 10;\nint min = (a &lt; b) ? a : b;  // min will be assigned the value of a, since a is less than b\n</code></pre> <p>Here, the condition <code>a &lt; b</code> is evaluated to be true, so the value of a is returned. If the condition had been <code>false</code>, the value of b would have been returned instead.</p> <p>The ternary operator can be used as a shorthand for an if-else statement. For example, the code above could be written as: <pre><code>int a = 5;\nint b = 10;\nint min;\nif (a &lt; b) {\nmin = a;\n} else {\nmin = b;\n}\n</code></pre></p>"},{"location":"intro/04-conditionals/#switch","title":"Switch","text":"<p><code>switch</code> statement allows you to execute a block of code based on the value of a variable or expression. The switch statement is often used as an alternative to a series of if statements, as it can make the code more concise and easier to read. Here is the basic syntax for a switch statement in C++:</p> <pre><code>switch (expression) {\ncase value1:\n// code to be executed if expression == value1\nbreak;\ncase value2:\n// code to be executed if expression == value2\nbreak;\n// ...\ndefault:\n// code to be executed if expression is not equal to any of the values\n}\n</code></pre> <p>The expression is evaluated once, and the value is compared to the values in each case statement. If a match is found, the code associated with that case is executed. The break statement is used to exit the switch statement and prevent the code in subsequent cases from being executed. The default case is optional, and is executed if none of the other cases match the value of the expression.</p> <p>Here is an example of a switch statement that checks the value of a variable x and executes different code depending on the value of x:</p> <pre><code>int x = 2;\nswitch (x) {\ncase 1:\ncout &lt;&lt; \"x is 1\" &lt;&lt; endl;\nbreak;\ncase 2:\ncout &lt;&lt; \"x is 2\" &lt;&lt; endl;\nbreak;\ncase 3:\ncout &lt;&lt; \"x is 3\" &lt;&lt; endl;\nbreak;\ndefault:\ncout &lt;&lt; \"x is not 1, 2, or 3\" &lt;&lt; endl;\n}\n</code></pre> <p>In this example, the output would be \"x is 2\", as the value of x is 2.</p> <p>Note</p> <p>It's important to note that C++ uses strict type checking, so you need to be careful about the types of variables you use in your conditionals. For example, you can't compare a string to an integer using the <code>==</code> operator.</p>"},{"location":"intro/04-conditionals/#switch-fallthrough","title":"Switch fallthrough","text":"<p>In C++, the <code>break</code> statement is used to exit a <code>switch</code> statement and prevent the code in subsequent cases from being executed. However, sometimes you may want to allow the code in multiple cases to be executed if certain conditions are met. This is known as a \"fallthrough\" in C++.</p> <p>To allow a <code>switch</code> statement to fall through to the next case, you can omit the break statement at the end of the case's code block. The code in the next case will then be executed, and the switch statement will continue to execute until a break statement is encountered or the end of the switch is reached.</p> <p>Here is an example of a switch statement with a fallthrough:</p> <pre><code>int x = 2;\nswitch (x) {\ncase 1:\ncout &lt;&lt; \"x is 1\" &lt;&lt; endl;\ncase 2:\ncout &lt;&lt; \"x is 2\" &lt;&lt; endl;\ncase 3:\ncout &lt;&lt; \"x is 3\" &lt;&lt; endl;\ndefault:\ncout &lt;&lt; \"x is not 1, 2, or 3\" &lt;&lt; endl;\n}\n</code></pre> <p>In this example, the output would be \"x is 2\" and \"x is 3\", as the break statement is omitted in the <code>case 2</code> block and the code in the <code>case 3</code> block is executed as a result.</p> <p>It is generally considered good practice to include a <code>break</code> statement at the end of each case in a <code>switch</code> statement to avoid unintended fallthrough. However, there may be cases where a fallthrough is desired behavior. In such cases, it is important to document the intended fallthrough in the code to make it clear to other programmers.</p>"},{"location":"intro/04-conditionals/#homework","title":"Homework","text":"<ul> <li> <p>Do all exercises up to this topic here.</p> </li> <li> <p>Coordinates of a Point. In this activity, you will have to code a way to find the quadrant of a given coordinate.</p> </li> </ul>"},{"location":"intro/04-conditionals/#outcomes","title":"Outcomes","text":"<p>It is expected for you to be able to solve all questions before this one <code>1041</code> on beecrowd. Sort Beecrowd questions from the most solved to the least solved questions here in the link. If you don't, see Troubleshooting. Don`t let your study pile up, this homework is just a small test, it is expected from you to do other questions on Beecrowd or any other tool such as leetcode.</p>"},{"location":"intro/04-conditionals/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion. Nhis is publicly visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me. Or visit the tutoring service.</p>"},{"location":"intro/05-loops/","title":"Loops, for, while and goto","text":"<p>A loop is a control flow statement that allows you to repeat a block of code. </p>"},{"location":"intro/05-loops/#while-loop","title":"while loop","text":"<p>This loop is used when you want to execute a block of code an unknown number of times, as long as a certain condition is true. It has the following syntax:</p> <p>Syntax: <pre><code>while (condition) {\n// code block to be executed\n}\n</code></pre> Example: <pre><code>int nums = 10;\nwhile (nums&gt;=0) {\ncout &lt;&lt; nums &lt;&lt; endl;\nnums--;\n}\n</code></pre></p> <p>If the block is only one statement, it can be expressed without <code>{}</code>s.</p> <p>Syntax: <pre><code>while (condition) // statement goes here\n</code></pre> Example: <pre><code>int nums = 10;\nwhile (nums&gt;=0) cout &lt;&lt; nums-- &lt;&lt; endl;\n</code></pre></p>"},{"location":"intro/05-loops/#do-while-loop","title":"do-while loop","text":"<p>This is similar to the <code>while</code> loop, but it is guaranteed to execute at least once.</p> <p>Syntax: </p> <pre><code>do {\n// code block to be executed\n} while (condition);\n</code></pre> <p>Example: <pre><code>int x = 0;\ndo{\ncout &lt;&lt; x &lt;&lt; endl;\nx++;\n} while(x&lt;10);\n</code></pre></p> <p>If the block is only one statement, it can be expressed without <code>{}</code>s.</p> <p>Syntax: <pre><code>do\n// single statement goes here\nwhile (condition);    </code></pre> Example: <pre><code>int x = 0;\ndo cout &lt;&lt; x++ &lt;&lt; endl;\nwhile (x&lt;=10);\n</code></pre></p>"},{"location":"intro/05-loops/#for-loop","title":"for loop","text":"<p>This loop is used when you know in advance how many times you want to execute a block of code.</p> <ul> <li>The initialization part is executed only once, at the beginning of the loop. It is used to initialize any loop variables.</li> <li>The condition is evaluated at the beginning of each iteration of the loop. If the condition is true, the code block inside the loop is executed. If the condition is false, the loop is terminated.</li> <li>The increment part is executed at the end of each iteration of the loop. It is used to update the loop variables.</li> </ul> <p>Syntax: <pre><code>for (initialization; condition; step_iteration) {\n// code block to be executed\n}\n</code></pre></p> <p>Example: <pre><code>for(int i=10; i&lt;=0; i--){\ncout &lt;&lt; i &lt;&lt; endl; }\n</code></pre></p> <p>If the block is only one statement, it can be expressed without <code>{}</code>s.</p> <p>Syntax: <pre><code>for (initialization; condition; step_iteration)\n// single statement goes here\n</code></pre> Example: <pre><code>for(int i=10; i&lt;=0; i--)\ncout &lt;&lt; i &lt;&lt; endl;\n</code></pre></p>"},{"location":"intro/05-loops/#range-based-loops","title":"range based loops","text":"<p>A range-based loop is a loop that iterates over a range of elements. The declaration type should follow the same type of the elements in the range. </p> <p>Syntax: <pre><code>for (declaration : range) {\n// code block to be executed\n}\n</code></pre> or <pre><code>for (declaration : range)\n// single statement\n</code></pre></p> <p>To avoid explaining arrays and vectors now, assume <code>v</code> as an iterable container that can hold multiple elements. I am going to use auto here to avoid explaining this topic any further. <pre><code>auto v = {1, 2, 3, 4, 5}; // an automatically inferred iterable container with multiple elements\nfor (int x : v) {\ncout &lt;&lt; x &lt;&lt; \" \";\n}\n</code></pre></p> <p>It is possible to automatically generate ranges <pre><code>#include &lt;ranges&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {  // goes from 0 to 9. in iota, the first element is inclusive and the last one is exclusive.\nfor (int i : views::iota(0, 10))  cout &lt;&lt; i &lt;&lt; ' ';\n}\n</code></pre></p>"},{"location":"intro/05-loops/#loop-control-statements","title":"Loop Control Statements","text":""},{"location":"intro/05-loops/#break","title":"<code>break</code>","text":"<p><code>break</code> keyword defines a way to break the current loop and end it immediately.</p> <pre><code>// check if it is prime\nint num; cin &gt;&gt; num; // read the number to be checked if is prime or not\nbool isPrime = true;\nfor(int i=2; i&lt;num; i++){\nif(num%i==0){ // check if i divides num\nisPrime = false;\nbreak; // this will break the loop and prevent further precessing\n}\n}\n</code></pre>"},{"location":"intro/05-loops/#continue","title":"<code>continue</code>","text":"<p><code>continue</code> keyword is used to skip the following statements of the loop and move to the next iteration.</p> <pre><code>// print all even numbers\nfor (int i = 1; i &lt;= 10; i++) {\nif (i % 2 == 1)\ncontinue;\ncout &lt;&lt; i &lt;&lt; \" \"; // this statement is skipped if odd numbers\n}\n</code></pre>"},{"location":"intro/05-loops/#goto","title":"<code>goto</code>","text":"<p>You should avoid <code>goto</code> keyword. PERIOD. The only acceptable usage is to break multiple nested loops at the same time. But even in this case, is better to use <code>return</code> statement and <code>functions</code> that you're going to see later in this course.  </p> <p>The <code>goto</code> keyword allows you to transfer control to a labeled statement elsewhere in your code. </p> <p>Example on how to create a loop using labels and goto. You can create a loop just using labels(anchors) and goto keywords. But this syntax is hard to debug and read. Avoid it at all costs:</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint i=0;\nstart: // this a label named as start.\ncout &lt;&lt; i &lt;&lt; endl;\ni++;\nif(i&lt;10)\ngoto start; // jump back to start\nelse\ngoto finish; // jump to finish\nfinish: // this a label named as finish.\nreturn 0;\n}\n</code></pre> <p>Example on hov to jump over and skip statements: <pre><code>#include &lt;iostream&gt;\nint main() {\nint x = 10;\ngoto jump_over_this;  // control jumps to the label below\nx = 20;  // this line of code is skipped\njump_over_this:  // label for goto statement\nstd::cout &lt;&lt; x &lt;&lt; std::endl;  // outputs 10\nreturn 0;\n}\n</code></pre></p> <p>Example of an arguably acceptable use of <code>goto</code>. Here you can see the usage of a way to break both loops at the same time. If you use <code>break</code>, you will only break the inner loop. In this situation it is better to break your code into functions to reduce complexity and nesting.  <pre><code>for (int i = 0; i &lt; imax; ++i)\nfor (int j = 0; j &lt; jmax; ++j) {\nif (i + j &gt; elem_max) goto finished;\n// ...\n}\nfinished:\n// ...\n</code></pre></p>"},{"location":"intro/05-loops/#loop-nesting","title":"Loop nesting","text":"<p>You can nest loops by placing one loop inside another. The inner loop will be executed completely for each iteration of the outer loop. Here is an example of nesting a for loop inside another for loop:</p> <pre><code>for (int i = 0; i &lt; 10; i++) {\nfor (int j = 0; j &lt; 5; j++) {\ncout &lt;&lt; \"i: \" &lt;&lt; i &lt;&lt; \" j: \" &lt;&lt; j &lt;&lt; endl;\n}\n}\n</code></pre>"},{"location":"intro/05-loops/#infinite-loops","title":"Infinite loops","text":"<p>A infinite loop is when the code loops indefinitely without having a way out. Here goes some examples:</p> <pre><code>while(true)\ncout &lt;&lt; \"Hello World!\" &lt;&lt; endl; </code></pre> <pre><code>for(;;)\ncout &lt;&lt; \"Hello World!\" &lt;&lt; endl; </code></pre> <pre><code>int i = 0;\nwhile(i&lt;10); // note the ';' here, it will run indefinitely an empty statement because it won't reach the scope.\n{\ncout &lt;&lt; i &lt;&lt; endl;\ni++;\n}\n</code></pre>"},{"location":"intro/05-loops/#homework","title":"Homework","text":"<p>Do all exercises up to this topic here.</p> <p>In this activity, you will have to solve Fibonacci sequence. You should implement using loops, and variables. Do not use arrays nor closed-form formulas.</p> <ul> <li>Easy Fibonacci</li> </ul> <p>Optional Readings on Fibonacci Sequence;</p> <p>Hint: Create two variables, one to store the current value and the previous value. For each iteration step, calculate the sum of both and store and put into a temp variable. Copy the current into the previous and set the current with the temporary you calculated before.</p>"},{"location":"intro/05-loops/#outcomes","title":"Outcomes","text":"<p>It is expected for you to be able to solve all questions before this one <code>1151</code> on beecrowd. Sort Beecrowd questions from the most solved to the least solved questions here in the link. If you don't, see Troubleshooting. Don`t let your study pile up, this homework is just a small test, it is expected from you to do other questions on Beecrowd or any other tool such as leetcode.</p>"},{"location":"intro/05-loops/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion. Nhis is publicly visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me. Or visit the tutoring service.</p>"},{"location":"intro/06-functions/","title":"Base Conversion, Functions, Pointers, Parameter Passing","text":""},{"location":"intro/06-functions/#base-conversion","title":"Base conversion","text":"<p>Data containers use binary coding to store data where every digit can be 0 or 1, this is called base 2, but there are different types of binary encodings and representation, the most common integer representation is Complement of two for representing positive and negative numbers and for floats is IEEE754. Given that, it is relevant to learn how to convert the most used common bases in computer science in order to code more efficiently.</p> <p>Most common bases are: - Base 2 - Binary. Digits can go from 0 to 1. <code>{0, 1}</code>; - Base 8 - Octal. Digits can go from 0 to 7. <code>{0, 1, 2, 3, 4, 5, 6, 7}</code>;  - Base 10 - Decimal. Digits can go from 0 to 9. <code>{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}</code>; - Base 16 - Hexadecimal. Digits can go from 0 to 9 and then from A to F. <code>{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F}</code>;</p>"},{"location":"intro/06-functions/#converting-from-decimal-to-any-base","title":"Converting from Decimal to any base","text":"<p>There are several methods for performing base conversion, but one common method is to use the repeated division and remainder method. To convert a number from base 10 to another base <code>b</code>, you can divide the number by <code>b</code> and record the remainder. Repeat this process with the quotient obtained from the previous division until the quotient becomes zero. The remainders obtained during the process will be the digits of the result in the new base, with the last remainder being the least significant digit.</p> <p>For example, to convert the decimal number 75 to base 2 (binary), we can follow these steps:</p> <pre><code>75 \u00f7 2 = 37 remainder 1\n37 \u00f7 2 = 18 remainder 1\n18 \u00f7 2 = 9 remainder 0\n9 \u00f7 2 = 4 remainder 1\n4 \u00f7 2 = 2 remainder 0\n2 \u00f7 2 = 1 remainder 0\n1 \u00f7 2 = 0 remainder 1\n</code></pre> <p>The remainders obtained during the process (1, 1, 0, 1, 0, 0, 1) are the digits of the result in base 2, with the last remainder (1) being the least significant digit. Therefore, the number 75 in base 10 is equal to 1001011 in base 2.</p>"},{"location":"intro/06-functions/#converting-from-any-base-to-decimal","title":"Converting from any base to decimal","text":"<p>The most common way to convert from any base to decimal is to follow the formula:</p> <p>dn-1*bn-1 + dn-2*bn-2 + ... + d1*b1 + d0*b0 </p> <p>Where dx represents the digit at the corresponding position x in the number, n is the number of digits in the number, and b is the base of the number.</p> <p>For example, to convert the number 1001011 (base 2) to base 10, we can use the following formula:</p> <p>(1 * 2^6) + (0 * 2^5) + (0 * 2^4) + (1 * 2^3) + (0 * 2^2) + (1 * 2^1) + (1 * 2^0) = 75</p> <p>Therefore, the number 1001011 in base 2 is equal to 75 in base 10.</p>"},{"location":"intro/06-functions/#functions","title":"Functions","text":"<p>A function is a block of code that performs a specific task. It is mostly used to isolate specific reusable functionality from the rest of the code. It has a name, a return type, and a list of parameters. Functions can be called from other parts of the program to execute the task. Here is an example of a simple C++ function that takes two integers as input and returns their sum.</p> <pre><code>int add(int x, int y) {\nint sum = x + y;\nreturn sum;\n}\n</code></pre> <p>To call the function, you would use its name followed by the arguments in parentheses:</p> <pre><code>int a = 2, b = 3;\nint c = add(a, b); // c will be equal to 5\n</code></pre> <p>Functions can also be declared before they are defined, in which case they are called \"prototypes.\" This allows you to use the function before it is defined, which can be useful if you want to define the function after it is used. For example:</p> <pre><code>int add(int x, int y);\nint main() {\nint a = 2, b = 3;\nint c = add(a, b);\nreturn 0;\n}\nint add(int x, int y) {\nint sum = x + y;\nreturn sum;\n}\n</code></pre>"},{"location":"intro/06-functions/#reference-declaration","title":"Reference Declaration","text":"Note <p>This content only covers an introduction to the topic.  </p> <p>The <code>&amp;</code> is used to refer memory address of the variable. When used in the declaration, it is the Lvalue reference declarator. It is an alias to an already-existing, variable, object or function. Read more here.</p> <p>When used as an prefix operator before the name of a variable, it will return the memory address where the variable is allocated.</p> <p>Example: <pre><code>string s;\n// the variable r has the same memory address of s\n// the declaration requires initialization\nstring&amp; r = s; s = \"Hello\";\ncout &lt;&lt; &amp;s &lt;&lt; endl; // prints the variable memory address location. in my machine: \"0x7ffc53631cd0\"\ncout &lt;&lt; &amp;r &lt;&lt; endl; // prints the same variable memory address location. in my machine: \"0x7ffc53631cd0\"\ncout &lt;&lt; s &lt;&lt; endl; // prints \"Hello\"\ncout &lt;&lt; r &lt;&lt; endl; // prints \"Hello\"\n// update the content\nr += \" world!\";\ncout &lt;&lt; s &lt;&lt; endl; // prints \"Hello world!\"\ncout &lt;&lt; r &lt;&lt; endl; // prints \"Hello world!\"\n</code></pre></p>"},{"location":"intro/06-functions/#pointer-declaration","title":"Pointer Declaration","text":"Note <p>This content only covers an introduction to the topic.  </p> <p>The <code>*</code> is used to declare a variable that holds the address of a memory position. A pointer is an integer number that points to a memory location of a container of a given type. Read more here.</p> <pre><code>string* r = nullptr; // it is not required do initialize, but it is a good practice to always initialize a pointer pointing to null address (0). \nstring s = \"Hello\";\nr = &amp;s; // the variable r stores the memory address of s\ncout &lt;&lt; s &lt;&lt; endl; // prints the content of the variable s. \"Hello\"\ncout &lt;&lt; &amp;s &lt;&lt; endl; // prints the address of the variable s. in my machine \"0x7fffdda021b0\"\ncout &lt;&lt; r &lt;&lt; endl;  // prints the numeric value of the address the pointer points, in this case it is \"0x7fffdda021b0\".\ncout &lt;&lt; &amp;r &lt;&lt; endl; // prints the address of the variable r. it is a different address than s, in my machine \"0x7fffdda021d0\".\ncout &lt;&lt; *r &lt;&lt; endl; // prints the content of the container that is pointing, it prints \"Hello\".\nstring other = \"world\";\nr = &amp;s; // r now points to another variable\ncout &lt;&lt; *r &lt;&lt; endl; // prints the content of the container that is pointing, it prints \"world\"\n</code></pre>"},{"location":"intro/06-functions/#passing-parameter-to-a-function-by-value","title":"Passing parameter to a function by value","text":"<p>Pass-by-value is when the parameter declaration follows the traditional variable declaration without <code>&amp;</code>. A copy of the value is made and passed to the function. Any changes made to the parameter inside the function have don't change on the original value outside the function.</p> pass-by-value.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid times2(int x) {\nx = x * 2;\n// the value x here is doubled. but it dont change the value outside the scope\n}\nint main()\n{\nint y = 2;\ntimes2(y); // this dont change the value, it passes a copy to the function\ncout &lt;&lt; y &lt;&lt; endl;  // output: 2\nreturn 0;\n}\n</code></pre>"},{"location":"intro/06-functions/#passing-parameter-to-a-function-by-reference","title":"Passing parameter to a function by reference","text":"<p>Pass-by-reference occurs when the function parameter uses the <code>&amp;</code> in the parameter declaration. It will allow the function to modify the value of the parameter directly in the other scope, rather than making a copy of the value as it does with pass-by-value. The mechanism behind the variable passed is that it is an alias to the outer variable because it uses the same memory position.</p> pass-by-reference.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid times2(int &amp;x) { // by using &amp;, x has the same address the variable passed where the function is called \nx*=2; // it will change the variable in caller scope\n}\nint main() {\nint y = 2;\ntimes2(y);\ncout &lt;&lt; y &lt;&lt; endl;  // Outputs 4\nreturn 0;\n}\n</code></pre>"},{"location":"intro/06-functions/#passing-parameter-to-a-function-by-pointer","title":"Passing parameter to a function by pointer","text":"<p>Pass-by-pointer occurs when the function parameter uses the <code>*</code> in the parameter declaration. It will allow the function to modify the value of the parameter in the other scope via memory pointer, rather than making a copy of the value as it does with pass-by-value. The mechanism behind it is to pass the memory location of the outer variable as a parameter to the function.</p> pass-by-pointer.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid times2(int *x) { // by using *, x has the same address the variable passed where the function is called\n// x holds the address of the outer variable\n// *x is the content of what x points.\n*x *= 2; // it will change the variable in caller scope\n}\nint main() {\nint y = 2;\ntimes2(&amp;y); // the function expects a pointer, given pointer is an address, we pass the address of the variable here\ncout &lt;&lt; y &lt;&lt; endl;  // Outputs 4\nreturn 0;\n}\n</code></pre>"},{"location":"intro/06-functions/#function-overload","title":"Function overload","text":"<p>A function with a specific name can be overload with different not implicitly convertible parameters.</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nfloat average(float a, float b){\nreturn (a + b)/2;\n}\nfloat average(float a, float b, float c){\nreturn (a + b + c)/3;\n}\nint main(){\ncout &lt;&lt; average(1, 2) &lt;&lt; endl; // print 1.5\ncout &lt;&lt; average(1, 2, 3) &lt;&lt; endl; // print 2\nreturn 0;\n}\n</code></pre>"},{"location":"intro/06-functions/#default-parameter","title":"Default parameter","text":"<p>Functions can have default parameters that should be used if the parameter is not provided, making it optional.</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid greet(string username = \"user\") {\ncout &lt;&lt; \"Hello \" &lt;&lt; mes &lt;&lt; endl;\n}\nint main() {\n// Prints \"Hello user\"\ngreet(); // the default parameter user is used here\n// Prints \"Hello John\"\nprintMessage(\"John\");\nreturn 0;\n}\n</code></pre>"},{"location":"intro/06-functions/#scopes","title":"Scopes","text":"<p>Scope is a region of the code where a identifier is accessible. A scope usually is specified by what is inside <code>{</code> and <code>}</code>. The global scope is the one that do not is inside any <code>{}</code>.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nstring h = \"Hello\"; // this variable is in the global scope\nint main() {\nstring w = \" world\"; // this variable belongs to the scope of the main function\ncout &lt;&lt; h &lt;&lt; w &lt;&lt; endl; // both variables are visible and accessible\nreturn 0;\n}\n</code></pre> <p>Multiple identifiers with same name can not be created in the same scope. But in a nested scope it is possible to shadow the outer one when declared in the inner scope.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nstring h = \"Hello\"; // this variable is in the global scope\nint main() {\ncout &lt;&lt; h; // will print \"Hello\"\nstring h = \" world\"; // this will shadow the global variable with the same name h\ncout &lt;&lt; h; // will print \" world\"\nreturn 0;\n}\n</code></pre>"},{"location":"intro/06-functions/#homework","title":"Homework","text":"<p>Do all exercises up to this topic here.</p> <ul> <li>Hexadecimal converter. In this activity, you will have to code a way to find the convert to hexadecimal.</li> </ul>"},{"location":"intro/06-functions/#outcomes","title":"Outcomes","text":"<p>It is expected for you to be able to solve all questions before this one <code>1957</code> on beecrowd. Sort Beecrowd questions from the most solved to the least solved questions here in the link. If you don't, see Troubleshooting. Don`t let your study pile up, this homework is just a small test, it is expected from you to do other questions on Beecrowd or any other tool such as leetcode.</p>"},{"location":"intro/06-functions/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion. Nhis is publicly visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me. Or visit the tutoring service.</p>"},{"location":"intro/07-streams/","title":"Streams and File IO","text":"<p>At this point, you already are familiar with the <code>iostream</code> header. But we never discussed what it is properly. It is a basic stream and it has two static variable we already use: <code>cin</code> for reading variables from the console input and <code>cout</code> to output things to console, see details here. It is possible to interact with all streams via the <code>&gt;&gt;</code> and <code>&lt;&lt;</code> operators.</p> <p>But C++ have 2 other relevant streams that we need to cover: <code>fstream</code> and <code>sstream</code>.</p>"},{"location":"intro/07-streams/#file-streams","title":"File streams","text":"<p>File streams are streams that target files instead of the terminal console. The <code>fstream</code> header describes the file streams and the ways you can interact with it.</p> <p>The main differences between console and file streams are: - You have to target the filesystem path for files because we can manage different files at the same, but for console, you only have one, so you dont need to target which console we are streaming. In order to not mess each target, you have to declare a different variable to store the target and state. - Files are persistent, so if you write something to them, and try to read from it again, the that will be there saved.</p> <p>Files are a kind of resource managed by the operation system. So every time you request something to be read or write, behind the scenes you are requesting something to the operating system, and it can be slow or subject by lock control. When you open a file to be read or write, the OS locks it to avoid problems. You can open a file to be read multiple times simultaneously, but you cannot write more than once. So to avoid problems, after reading or writing the file, you should close the file.</p> <pre><code>#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main() {\n// Open the file\n// this file path is relative to the executable, so be assured it exists in the same folder the executable is placed\n// fin is the variablename and it is function initialized via a file path to target, but it can be any valid identifier\n// I am using fin as variable to follow the same metaphor `fin` as `file input` as we have with console input `cin`, \nifstream fin(\"file.txt\"); // Check if the file is open\n// it is a good practice to check if the file is really there before doing anything\nif (!fin.is_open()) {\ncerr &lt;&lt; \"Error opening file\" &lt;&lt; endl;\nreturn 1; // quits the program with an error code\n}\n// Read the contents of the file line by line\nstring line;\n// getline can target streams in general, so you can pass the file stream as a target\nwhile (getline(fin, line)) { // while the file have lines, read and store the content inside the line variable\ncout &lt;&lt; line &lt;&lt; endl; // output each string into the console\n}\n// Close the file\nfin.close();\nreturn 0;\n}\n</code></pre>"},{"location":"intro/07-streams/#string-stream","title":"String Stream","text":"<p>The <code>sstream</code> header describes string stream, which is a type of memory stream and is very useful to do string manipulation. For our intent, we aro going to focus 3 types of memory streams.</p> <ul> <li><code>ostringstream</code>: works just like <code>cout</code> but the content will printed to a memory region.</li> <li>it is more efficient to build a complex string in this way than <code>cout</code>ing multiple times;  </li> <li><code>istringstream</code>: works just like <code>cin</code> but it will read from a memory area.</li> <li>it is safer to read from a closed memory area than, and you ran reset the reading pointer to re-read previous elements easier than with <code>cin</code>.</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\nusing namespace std;\nint main() {\nostringstream oss; // declare the output stream\n// print numbers from 0 to 100\nfor(int i=0; i&lt;=100; i++)\noss &lt;&lt; i &lt;&lt; ' '; // store the data into memory\ncout &lt;&lt; oss.str(); // convert the stream into a string to be printed all at once\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\nusing namespace std;\nint main() {\n// read input\nstring input;\ngetline(cin, input);\n// initialize string stream with the content from a console line\nistringstream ss(input); // declare the stream to read from\n// extract input\nstring name;\nstring course;\nstring grade;\niss &gt;&gt; name &gt;&gt; course &gt;&gt; grade;\n}\n</code></pre> <p>You can combine string stream and file stream to read a whole file and store into a single string.</p> <pre><code>#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main() {\n// Open the file\nifstream file(\"file.txt\");\n// Check if the file is open\nif (!file.is_open()) {\ncerr &lt;&lt; \"Error opening file\" &lt;&lt; endl;\nreturn 1;\n}\n// Read the contents of the file into a stringstream\nstringstream ss;\nss &lt;&lt; file.rdbuf(); // read the whole file buffer and stores it into a string stream\n// Close the file\nfile.close();\n// Convert the stringstream into a string\nstring contents = ss.str();\ncout &lt;&lt; contents &lt;&lt; endl; // prints the whole file at once\nreturn 0;\n}\n</code></pre>"},{"location":"intro/07-streams/#homework","title":"Homework","text":"<p>You have the job of creating a small program to read a file image in the format PGMA and inverse the colors as a negative image.</p> <p>You can test your code with different images if you want. You can download more images here. But here goes 2 examples:</p> <ul> <li>Sample input easy: baboon.ascii.pgm - max intensity is not 255 and don't have comments.</li> <li>Sample input harder: lena.ascii.pgm - have comments, and the max intensity is different than 255.</li> </ul> <p>You can test if your output file is correct using this tool. You can open this file via any text reader, use the online viewer, or use any app that reads pnm images.</p>"},{"location":"intro/07-streams/#attention","title":"Attention:","text":"<ul> <li>To create the inverse image, you should read the file header and search for the maximum intensity. You should use this number as a base to inverse. In the Lena case, it is 245.</li> <li>You should pay attention that every line shouldn't be bigger than 70 chars;</li> <li>Pay attention that the line 2 might exists or not. And any comment found in the file should be skipped.</li> </ul> <p>The user should input the filename to be read. So you should store it into a string variable. The output filename should be the same as the input but with '.inverse' concatenated in the end. Ex.: lena.pgm becomes lena.inverse.pgm; If you find this too complicated, just concatenate with .inverse.pgm would be acceptable. ex.: lena.pgm becomes lena.pgm.inverse.pgm</p> <p>In order for your program to find the file to be read, you should provide the fullpath to the file or simply put the file in the same folder your executable is.</p> <p>HINT: In order to find comments and ignore them do something like that: <pre><code>string widthstr;\nint width;\nfin &gt;&gt; widthstr;\nif(widthstr.at(0)=='#')\ngetline(fin, widthstr); // ignore line\nelse\nwidth = stoi(widthstr); // covert string to integer\n</code></pre></p>"},{"location":"intro/08-arrays/","title":"Arrays","text":"<p>https://en.cppreference.com/w/cpp/language/array</p>"},{"location":"portfolio/","title":"Portfolio","text":""},{"location":"portfolio/#schedule","title":"Schedule","text":"Week Date Topic 1 2023/01/16 Introduction 2 2023/01/23 Case Studies 3 2023/01/30 Game Developer Portfolio Structure 4 2023/02/06 Communication &amp; Audience 5 2023/02/13 Style &amp; Accessibility 6 2023/02/20 Strategy &amp; Analytics 7 2023/02/27 Frontend 8 2023/03/06 Frontend 9 2023/03/13 BREAK 10 2023/03/20 Final Project &amp; Coding Interviews 11 2023/03/27 Hosting and Domain 12 2023/04/03 Dynamic Content &amp; Blogs 13 2023/04/10 Promoting 14 2023/04/17 Cover Letters 15 2023/04/24 Traditional CVs 16 2023/05/01 FINALS"},{"location":"portfolio/01-introduction/","title":"Introduction","text":"<p>A game developer portfolio is a collection of materials that showcase a game developer's skills, experience, and    accomplishments. It is typically used by game developers to demonstrate their abilities to potential employers,    clients, or partners, and may include a variety of materials such as:</p> <ul> <li>A resume or CV: This should highlight your education, work experience, and skills relevant to game development.</li> <li>Examples of your work: This can include demos, prototypes, or completed games that you have developed or    contributed to. It's a good idea to include links to any online versions of your work, as well as screenshots or video trailers.</li> <li>A portfolio website: Many game developers choose to create a website specifically for their portfolio, which can    include additional information about their skills and experience, as well as links to their work.</li> <li>Blogs, articles, or other writing: If you have written about game development or related topics, you may want to    include these in your portfolio to show your knowledge and expertise.</li> <li>Testimonials or references: Including positive feedback from clients or colleagues can help to demonstrate the    quality of your work.</li> </ul> <p>Overall, a game developer portfolio should be designed to demonstrate your abilities and accomplishments in a    clear and concise way, and should be tailored to the specific needs and goals of the person or organization you    are presenting it to.</p> <p>Building a portfolio is not only about you, it is about making the life easier of the ones interested on you by  giving insights if they should hire you, follow you or anything else. In order to make people understand you, you  have to know yourself better.</p>"},{"location":"portfolio/01-introduction/#who-are-you","title":"Who are you?","text":"<p>In your portfolio, you will have to express yourself in a way that others can understand who you are, and it can be  challenging for some. In order do help you discover who you are, what you excel, and what do you really enjoy  doing. I will be briefly vague here to point some emotional support and reasoning to help you answer the question.  If you are clear about that, please skip this entire section. Here goes a small amount of advices I wish I have  heard when I was young. </p> <p>You are a complex being and hard to define. I know. It is hard to put yourself in a frame or box, but this process is  relevant to make the life of the others to evaluate if they want more you or not. If for some reason a person is  reading your portfolio, it means that you are ahead of the others, so you must to respect their time and goals while  they are reading your content.</p> <p>What you do, do not define what you are, you can even work with something you dont love as long it is part of a bigger  plan. Given that, you have to know how to differentiate yourself from your work while respecting your  feelings. The sweet spot is when you mix who you are with what you do, and you have nice feelings about it. But this  can be hard to achieve and require maturity to mix things. If you dont have a clear understand of those aspects of  yourself, you will be subjected to be exploited by bad companies and managers.</p> <p>It is totally fine try to excel some job you are not passionate. You just have to find means to make your time  doing it as enjoyable as possible. In the end of the journey it will slowly become something you can be proud of,  and you will become a different person than the one you are now. Understanding this kind of mentality will help you  endure more and be more resilient to problems. </p> <p>Keep track of your progress towards your goal. First of all, have a clear goal, so you can build a path to it.  Otherwise, any path would sound just like any other apathetic path. Having a clear goal will make your path  shine and easy to choose. It will help you in difficult moments where you feel uncomfortable by being just a small  piece of a machinery. You will be able to act as part of machine while you need to achieve your goal as a necessary  step.</p> <p>Focus on always keep track on your evolution on your journey to excellence. Don't compare too much yourself to the  others, everyone is facing a different journey and everyone took different paths in their career that probably you  didn't have the option to chose in the past. But you cannot be uncritical either, you have to analyse your progress and  check if your current path is making you life good, you have to take a decision to change the plan or even the goal  with the new information you learned through the current path you are pursuing.</p> <p>In other point of view, you wont start your career as senior developer, so you have to build your own path. Making  mistakes is part of the process, and that is the reason you will be gradually exposed to big things. You should  accept yourself, don't push too hard, and do some basic stuff. Just accept the challenges of doing something not  fancy, but relevant to build your career.</p>"},{"location":"portfolio/01-introduction/#define-and-state-your-mission-and-goal","title":"Define and state your mission and goal","text":"<p>Are you a generalist or a specialist type?</p> <p>What position you are looking for?</p> <p>What kind of person you want to become?</p>"},{"location":"portfolio/01-introduction/#gather-information","title":"Gather information","text":"<p>In order to build a good portfolio, you will need to gather information about yourself and your work. In the process  you will discover yourself. It will feels like looking to a mirror for the first time.</p> <p>If you didnt published yot your projects on itchio, github, or any other platform, now it is a good moment for doing it. Pay attention that if you are going to share your code publicly, you have to avoid sharing content that do not belong to you. In other words, avoid copyright infringements. </p>"},{"location":"portfolio/01-introduction/#proof-of-your-accomplishments","title":"Proof of your accomplishments","text":"<p>It is a good practice to always take screenshots, use web archive or any means to prove what you are stating. Some games got lost in time, they die or become unavailable in the long term.</p> Personal advice <p>In my case, we developed a very successful game in the past, and because of some problems with investors and judicial dispute, we had to shut down the game. But it was one of the most successful games in that year, it was nominated to Unity Awards and it was the most downloaded racing game. The only things that I can showcase now are print-screens, recorded videos and web-archive pages. So it is something that can make you survive the questions.</p>"},{"location":"portfolio/01-introduction/#videos-photos-or-lightweight-web-builds","title":"Videos, photos, or lightweight web builds","text":"<p>A good way to express your work is to show it in a form of videos, or photos. If your game is small enough to be embedded, or you can strip the most relevant part of it and built for web(webgl, wasm etc), try to publish the relevant part of it online, but do not over-do it, because it will take too much time to craft a good interaction.</p>"},{"location":"portfolio/01-introduction/#homework","title":"Homework","text":"<ol> <li>Define your domain name;<ul> <li>I usually search domains here and buy on wherever is cheaper, usually here </li> </ul> </li> <li>Find a good portfolio to follow;</li> <li>Design the scaffold / wireframe of what you want to show; </li> <li>Gather the data you want to show;</li> <li>Think on catchphrases and call to actions.</li> </ol>"},{"location":"portfolio/02-cases/","title":"Case Study","text":""},{"location":"portfolio/02-cases/#index","title":"Index","text":"<ul> <li>Activity</li> <li>Considerations</li> <li>Evaluated Portfolios</li> </ul>"},{"location":"portfolio/02-cases/#activity","title":"Activity","text":"<p>This class is totally up to you. Here goes what you should do in class and finish at home. </p> <ol> <li>Search a good portfolio published online<ul> <li>use Twitter, LinkedIn, Google to search for good game developer portfolios;</li> </ul> </li> <li>Fork this repo</li> <li>Create a markdown file in this folder with a meaningful name about the benchmarked repository.<ul> <li>Follow this example</li> <li>The file name should be the website domain name followed by .md</li> <li>If another student is aiming to evaluate the same portfolio, just edit the file adding your evaluation to the text.</li> </ul> </li> <li>Your file should contain:<ul> <li>A summary</li> <li>The portfolio evaluated</li> <li>The date the evaluation happened</li> <li>Print-screens uploaded to image hosting services such as imgur or others</li> <li>What things you judge as good and you are aiming to follow and target</li> <li>What things you judge that needs attention and should be improved</li> <li>Why you would hire the owner of the portfolio</li> <li>General considerations</li> </ul> </li> <li>Edit this file on github to link your work here if you want to showcase it here.</li> <li>Send a push request</li> </ol>"},{"location":"portfolio/02-cases/#considerations","title":"Considerations","text":"<ul> <li>The portfolios evaluated here are just opinions</li> </ul>"},{"location":"portfolio/02-cases/#evaluated-portfolios","title":"Evaluated Portfolios","text":"<ul> <li>Example</li> </ul>"},{"location":"portfolio/02-cases/example.com/","title":"Index","text":"<ul> <li>Assessment 1</li> <li>Assessment 2</li> </ul>"},{"location":"portfolio/02-cases/example.com/#assessment-1","title":"Assessment 1","text":""},{"location":"portfolio/02-cases/example.com/#summary","title":"Summary","text":"<ul> <li>The date the evaluation happened</li> <li>The portfolio evaluated</li> <li>Briefing</li> </ul>"},{"location":"portfolio/02-cases/example.com/#strength","title":"Strength","text":"<p>What things you judge as good and you are aiming to follow and target. Add images as reference using print-screens uploaded to image hosting services such as imgur or others;</p>"},{"location":"portfolio/02-cases/example.com/#improvements","title":"Improvements","text":"<ul> <li>What things you judge that needs attention or should be improved?</li> <li>What questions you would do to this person?</li> </ul>"},{"location":"portfolio/02-cases/example.com/#best-fit","title":"Best fit","text":"<ul> <li>Why you would hire the owner of the portfolio? </li> <li>For what kind of task?</li> <li>What position?</li> <li>How do you see this person interacting with others?</li> </ul>"},{"location":"portfolio/02-cases/example.com/#general-considerations","title":"General considerations","text":"<ul> <li>Just add some final consideration for the portfolio owner;</li> <li>If possible, send a message to one of its communication channels informing your assessment;</li> </ul>"},{"location":"portfolio/02-cases/example.com/#assessment-2","title":"Assessment 2","text":"<p>The other student willing to do multiple assessment for the same portfolio, just create an entry in the index following the same structure and same the assessment differently in this case, we put number 2. And use the same structure on the 1.</p>"},{"location":"portfolio/03-structure/","title":"Game Developer Structure","text":"<p>Create a single page app containing most of these features listed here.</p>"},{"location":"portfolio/03-structure/#head","title":"Head","text":"<p>Chose carefully what to you use as a head of your page. It is the first thing a person reads. It can be an impactful message, a headline, personal statement, background video or very limited interactive section.</p>"},{"location":"portfolio/03-structure/#about","title":"About","text":"<p>This is a summary obout yourself, be brief and achievement oriented. What and who you are. Contact info via social  medias. State your working status and target. If you are a narrative centred person, you can create something fancy  here, but dont over-do, less is more!</p>"},{"location":"portfolio/03-structure/#showcase","title":"Showcase","text":"<ul> <li>Projects</li> <li>Ability and versatility</li> <li>Community Contributions</li> </ul> <p>You can showcase your personal work, a job you make for a client(if authorized).</p>"},{"location":"portfolio/03-structure/#achievements","title":"Achievements","text":"<ul> <li>List key achievements and skills</li> <li>Education</li> <li>Testimonials or anything to prove your skills and capacity</li> </ul>"},{"location":"portfolio/03-structure/#project-detail","title":"Project Detail","text":"<ul> <li>You should create a way to explain more about what is showcased</li> </ul>"},{"location":"portfolio/03-structure/#blog","title":"Blog","text":"<ul> <li>Featured posts/content and call to action to read your ongoing content production</li> <li>Explain your process in designing a game or piece of software</li> <li>Explain some interesting details you learn or describe your knowledge explorations.</li> </ul>"},{"location":"portfolio/03-structure/#contact","title":"Contact","text":"<p>Explicitly state what people should expect if they contact you and what they can expect from your return. Ex.: If  you aim to be a freelance, state your offer and ask for them to briefly state the job activity, time frame and the rate  they are willing to pay. </p> <p>Another option is to list all of your social medias, but dont overuse this. Nowadays we have bunch of them, so if  you list all of them, there is chances, you are not active there and the link will guide the reader to a empty and  haunted house and they will not engage.</p>"},{"location":"portfolio/03-structure/#homework","title":"Homework","text":"<ul> <li>Set your goal as your portfolio. </li> <li>Create a wireframe draft of what you are going to do on figma or any other tool you find relevant.</li> </ul>"},{"location":"portfolio/04-communication/","title":"Communication","text":"<p>Having a well-written and organized portfolio is important for any game developer, as it can help them stand out from the competition and demonstrate their skills and experience to potential employers. A good portfolio should clearly communicate the developer's strengths and accomplishments, and should be tailored to the specific needs and expectations of the audience.</p> <p>Effective communication is crucial in building a strong game developer portfolio, as it allows the developer to clearly convey their skills and experiences to potential employers. A portfolio that is well-written and easy to understand will be more effective at convincing an employer to hire the developer, while a poorly written or poorly organized portfolio may have the opposite effect.</p>"},{"location":"portfolio/04-communication/#audience","title":"Audience","text":"<p>In general your portfolio will be read by:</p> <ul> <li>Human Resources</li> <li>Software Developers</li> </ul>"},{"location":"portfolio/04-communication/#human-resources","title":"Human Resources","text":""},{"location":"portfolio/04-communication/#software-developers","title":"Software Developers","text":""},{"location":"portfolio/08-get-ready/","title":"Final project","text":"<p>Your portfolio should be a hosted webpage and a open repository on github.</p> <p>You should follow a portfolio structure, to build a website and host it publicly. It should have a nice style, a good communication is the key to execute and analyse your strategy in order to capture insights. You can optionally increment your portfolio via dynamic content such as blogs or whatever you find relevant. Another extra step would be to create a generic cover letter to express your intentions and goals more personally. Note that some game companies still require CVs To boost your visualization, you can promote.</p> <p>Minimum steps: 1. Have a domain; 2. Create a github repository; 3. Push your frontend to the repo; 4. Enable github pages; 5. Create a CI/CD to build and deploy to gh pages; 6. Point your domain to gh-pages;</p>"},{"location":"portfolio/08-get-ready/#2023","title":"2023","text":"<p>Here goes a list of portfolios</p>"},{"location":"portfolio/09-hosting/","title":"Hosting","text":"<p>There are many hosting options and solutions to match each need. Lets cover some options here.</p>"},{"location":"portfolio/09-hosting/#static-html-with-static-data","title":"Static HTML with Static Data","text":"<p>If what you want to serve is static hosting, your content is only frontend and do not require backend, you can use  github pages, google firebase, S3 bucket hosting or many others. This is the easiest approach.  - In this scenario you will be able to store only pre-generated html and static files; - This is useful even if you use blogs that changes rarely, you would have to redeploy your page for every change.</p>"},{"location":"portfolio/09-hosting/#static-html-with-dynamic-data","title":"Static HTML with Dynamic Data","text":"<p>If your html is static and need backend services that are rarely called, you can go with cloud functions, my  suggestions here are google cloud run and aws amplify or even firebase functions. If you use nextjs website, check  vercel or netlify hosting services.  - The deploys are easy; - It can be very expensive if you hit high traffic, but it will remain free if you dont hit the free tiers; - You will have to pay attention to your database management;</p>"},{"location":"portfolio/09-hosting/#dynamic-html-with-dynamic-data","title":"Dynamic HTML with Dynamic Data","text":"<p>If your website generate content dynamically such as Wordpress blogs or any custom made combination with next or  anything. - There is many \"cheap hosting\" solutions that are mostly bad performant(it can reach more than 10s to answer a    request). You have to avoid them to make your user enjoy the visit; - Management can go as hard as possible, but the results can be awesome; - It can be really expensive;</p> <p>I am assuming you wont have a huge traffic, but you have a complex combination of services. In the complex cases and if you want to make your life easier and cheaper,my suggestion for hosting would be oracle cloud with arm cpu.  They offer for free a virtual machine with 200gb storage, 4vcpus, 24gb ram for free at this date of 2022/12  tutorial. In this scenario, I recommend using https://coolify.io/ as  your deployment management system, just pay attention that this machine is running in an arm cpu. With this  combination, you can manage everything easily in one place for free. This is not ideal, because you wont have  backups, but it is good enough for most scenarios.</p> <p>If you have plenty of money or your website have high traffic, I recommend you to use Kubernetes to orchestrate  every microservice.</p>"}]}